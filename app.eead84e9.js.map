{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/lib/CannonDebugRenderer.js","webpack:///./src/lib/WebGLApp.js","webpack:///./src/lib/loadTexture.js","webpack:///./src/lib/loadEnvMap.js","webpack:///./src/lib/AssetManager.js","webpack:///./src/scene/Suzanne.js","webpack:///./src/scene/shaders/pass.vert","webpack:///./src/lib/MotionBlurPass/MotionBlurShaderChunks.js","webpack:///./src/lib/MotionBlurPass/VelocityShader.js","webpack:///./src/lib/MotionBlurPass/GeometryShader.js","webpack:///./src/lib/MotionBlurPass/CompositeShader.js","webpack:///./src/lib/MotionBlurPass/MotionBlurPass.js","webpack:///./src/lib/MotionBlurPass/utils.js","webpack:///./src/index.js","webpack:///./src/scene/lights.js","webpack:///./src/scene/shaders/vignette.frag"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","CannonDebugRenderer","scene","world","tmpVec0","CANNON","Vec3","tmpVec1","tmpVec2","tmpQuat0","this","_meshes","_material","THREE","color","wireframe","_sphereGeometry","_boxGeometry","_planeGeometry","_cylinderGeometry","bodies","meshes","shapeWorldPosition","shapeWorldQuaternion","meshIndex","body","shapes","shape","_updateMesh","mesh","quaternion","vmult","shapeOffsets","position","vadd","mult","shapeOrientations","copy","visible","remove","index","_typeMatch","_createMesh","_scaleMesh","material","geo","type","Shape","types","SPHERE","BOX","PLANE","CONVEXPOLYHEDRON","vertices","v","x","y","z","faces","face","a","b","computeBoundingSphere","computeFaceNormals","geometryId","id","TRIMESH","indices","getTriangleVertices","HEIGHTFIELD","xi","yi","k","getConvexTrianglePillar","pillarConvex","pillarOffset","ii","add","geometry","Sphere","Box","Plane","ConvexPolyhedron","Trimesh","Heightfield","radius","scale","set","halfExtents","multiplyScalar","WebGLApp","background","backgroundAlpha","fov","frustumSize","near","far","options","isRunning","time","dt","performance","now","resize","width","height","pixelRatio","renderer","getPixelRatio","setPixelRatio","setSize","camera","isPerspectiveCamera","aspect","left","right","top","bottom","updateProjectionMatrix","composer","traverse","obj","draw","saveScreenshot","fileName","dataURI","canvas","toDataURL","saveDataURI","update","xrframe","orbitControls","isTransformControls","step","cannonDebugRenderer","forEach","fn","render","start","setAnimationLoop","animate","stop","stats","begin","Math","min","maxDeltaTime","end","antialias","postprocessing","alpha","preserveDrawingBuffer","failIfMajorPerformanceCaveat","undefined","sortObjects","gamma","outputEncoding","xr","enabled","domElement","setClearColor","maxPixelRatio","orthographic","cameraPosition","lookAt","gl","getContext","addEventListener","isDragging","event","isPrimary","child","onPointerDown","offsetX","offsetY","onPointerMove","onPointerUp","maxMultisampling","getParameter","MAX_SAMPLES","EffectComposer","multisampling","frameBufferType","addPass","RenderPass","OrbitControls","enableDamping","dampingFactor","enablePan","keys","showWorldWireframes","showFps","Stats","showPanel","document","appendChild","dom","controls","controlsState","State","hideControls","wrapGUI","expanded","closeControls","styles","style","createElement","innerHTML","head","loadGPUTier","getGPUTier","glContext","then","gpuTier","gpu","tier","isMobile","fps","indexOf","innerWidth","innerHeight","devicePixelRatio","cursor","blob","dataURIToBlob","link","download","href","URL","createObjectURL","onclick","setTimeout","revokeObjectURL","removeAttribute","click","loadTexture","url","texture","encoding","setTextureParams","loadImage","crossorigin","image","needsUpdate","initTexture","Error","opt","flipY","mapping","format","isJPEG","search","repeat","wrapS","wrapT","minFilter","magFilter","generateMipmaps","equirectangular","pmrem","pmremEquirectangular","size","highestPowerOfTwo","naturalHeight","renderTarget","outTexture","fromEquirectangularTexture","dispose","basePath","extension","urls","generateCubeUrls","replace","Promise","resolve","reject","HDRCubeTextureLoader","load","cubeMap","assignCubemapOptions","pmremGenerator","compileCubemapShader","fromCubemap","pmremCubemap","compileEquirectangularShader","cubeRenderTarget","fromEquirectangular","prefix","postfix","TypeError","_getQueued","_extractType","find","item","ext","lastIndexOf","test","itemLoadingStart","Date","_loadItem","DEBUG","console","log","prettyMs","error","queue","total","loadingStart","pMap","logError","percent","concurrency","errors","filter","groupLog","GLTFLoader","err","fetch","response","json","loadEnvMap","arrayBuffer","text","groupCollapsed","groupEnd","suzanneKey","assets","albedoKey","metalnessKey","roughnessKey","normalKey","hdrKey","Suzanne","webgl","suzanne","clone","map","metalnessMap","roughnessMap","normalMap","normalScale","envMap","roughness","metalness","isMesh","coords","raycaster","setFromCamera","hits","intersectObject","rotation","angularVelocity","prev_skinning_pars_vertex","velocity_vertex","ShaderChunk","skinbase_vertex","beginnormal_vertex","skinnormal_vertex","defaultnormal_vertex","skinning_vertex","VelocityShader","uniforms","prevProjectionMatrix","Matrix4","prevModelViewMatrix","prevBoneTexture","expandGeometry","interpolateGeometry","smearIntensity","vertexShader","skinning_pars_vertex","fragmentShader","GeometryShader","CompositeShader","defines","SAMPLES","JITTER_STRATEGY","BLUENOISE_SIZE","sourceBuffer","velocityBuffer","jitter","blueNoiseTex","_blackColor","Color","_defaultOverrides","MotionBlurPass","samples","blurTransparent","renderCameraBlur","renderTargetScale","jitterStrategy","RANDOM_JITTER","debug","display","DEFAULT","dontUpdateState","_prevPosMap","Map","_currentFrameMod","_frustum","Frustum","_projScreenMatrix","_cameraMatricesNeedInitializing","_prevCamProjection","_prevCamWorldInverse","_velocityBuffer","WebGLRenderTarget","LinearFilter","HalfFloatType","_compositeMaterial","ShaderMaterial","_compositeQuad","ThreePass","FullScreenQuad","_enabled","val","clear","UnsignedByteType","RGBFormat","readBuffer","writeBuffer","compositeQuad","finalBuffer","renderToScreen","autoClear","compile","_ensurePrevCameraTransform","GEOMETRY","setRenderTarget","_drawAllMeshes","VELOCITY","compositeMaterial","max","floor","matrixWorldInverse","projectionMatrix","prevPosMap","lastUsedFrame","matrixWorld","geometryMaterial","velocityMaterial","boneMatrices","boneTexture","isSkinned","skeleton","bones","skinning","boneTextureNeedsUpdate","Float32Array","sqrt","DataTexture","RGBAFormat","FloatType","saveState","thisFrameId","traverseVisibleMeshes","callback","isSkinnedMesh","children","_drawMesh","has","delete","overrides","motionBlur","isTransparent","transparent","isCulled","frustumCulled","intersectsObject","_saveCurrentObjectState","_getPreviousFrameState","projMat","invMat","multiplyMatrices","renderBufferDirect","projScreenMatrix","setFromProjectionMatrix","Pass","REGULAR_JITTER","location","includes","querySelector","Slider","label","pow","inverseMapping","log10","visibility","hemiLight","setHSL","groundColor","dirLight","addNaturalLight","motionBlurPass","screenshotButton","vignette","ShaderPass","tDiffuse","smoothness","padding","fontSize","textContent"],"mappings":"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","file":"app.eead84e9.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([228,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","/* eslint-disable no-underscore-dangle */\nimport * as THREE from 'three'\nimport CANNON from 'cannon'\n\n/**\n * Adds Three.js primitives into the scene where all the Cannon bodies and shapes are.\n * @class CannonDebugRenderer\n * @param {THREE.Scene} scene\n * @param {CANNON.World} world\n */\n\nexport default class CannonDebugRenderer {\n  tmpVec0 = new CANNON.Vec3()\n  tmpVec1 = new CANNON.Vec3()\n  tmpVec2 = new CANNON.Vec3()\n  tmpQuat0 = new CANNON.Vec3()\n\n  constructor(scene, world) {\n    this.scene = scene\n    this.world = world\n\n    this._meshes = []\n\n    this._material = new THREE.MeshBasicMaterial({ color: 0x00ff00, wireframe: true })\n    this._sphereGeometry = new THREE.SphereGeometry(1)\n    this._boxGeometry = new THREE.BoxGeometry(1, 1, 1)\n    this._planeGeometry = new THREE.PlaneGeometry(10, 10, 10, 10)\n    this._cylinderGeometry = new THREE.CylinderGeometry(1, 1, 10, 10)\n  }\n\n  update() {\n    const { bodies } = this.world\n    const meshes = this._meshes\n    const shapeWorldPosition = this.tmpVec0\n    const shapeWorldQuaternion = this.tmpQuat0\n\n    let meshIndex = 0\n\n    for (let i = 0; i !== bodies.length; i++) {\n      const body = bodies[i]\n\n      for (let j = 0; j !== body.shapes.length; j++) {\n        const shape = body.shapes[j]\n\n        this._updateMesh(meshIndex, body, shape)\n\n        const mesh = meshes[meshIndex]\n\n        if (mesh) {\n          // Get world position\n          body.quaternion.vmult(body.shapeOffsets[j], shapeWorldPosition)\n          body.position.vadd(shapeWorldPosition, shapeWorldPosition)\n\n          // Get world quaternion\n          body.quaternion.mult(body.shapeOrientations[j], shapeWorldQuaternion)\n\n          // Copy to meshes\n          mesh.position.copy(shapeWorldPosition)\n          mesh.quaternion.copy(shapeWorldQuaternion)\n\n          // Change the visiblity\n          if ('visible' in body) {\n            mesh.visible = body.visible\n          }\n        }\n\n        meshIndex += 1\n      }\n    }\n\n    for (let i = meshIndex; i < meshes.length; i++) {\n      const mesh = meshes[i]\n      if (mesh) {\n        this.scene.remove(mesh)\n      }\n    }\n\n    meshes.length = meshIndex\n  }\n\n  _updateMesh(index, body, shape) {\n    let mesh = this._meshes[index]\n    if (!this._typeMatch(mesh, shape)) {\n      if (mesh) {\n        this.scene.remove(mesh)\n      }\n      mesh = this._meshes[index] = this._createMesh(shape)\n    }\n    this._scaleMesh(mesh, shape)\n  }\n\n  _createMesh(shape) {\n    let mesh\n    const material = this._material\n\n    const geo = new THREE.Geometry()\n\n    switch (shape.type) {\n      case CANNON.Shape.types.SPHERE:\n        mesh = new THREE.Mesh(this._sphereGeometry, material)\n        break\n\n      case CANNON.Shape.types.BOX:\n        mesh = new THREE.Mesh(this._boxGeometry, material)\n        break\n\n      case CANNON.Shape.types.PLANE:\n        mesh = new THREE.Mesh(this._planeGeometry, material)\n        break\n\n      case CANNON.Shape.types.CONVEXPOLYHEDRON:\n        // Create mesh\n\n        // Add vertices\n        for (let i = 0; i < shape.vertices.length; i++) {\n          const v = shape.vertices[i]\n          geo.vertices.push(new THREE.Vector3(v.x, v.y, v.z))\n        }\n\n        for (let i = 0; i < shape.faces.length; i++) {\n          const face = shape.faces[i]\n\n          // add triangles\n          const a = face[0]\n          for (let j = 1; j < face.length - 1; j++) {\n            const b = face[j]\n            const c = face[j + 1]\n            geo.faces.push(new THREE.Face3(a, b, c))\n          }\n        }\n        geo.computeBoundingSphere()\n        geo.computeFaceNormals()\n\n        mesh = new THREE.Mesh(geo, material)\n        shape.geometryId = geo.id\n        break\n\n      case CANNON.Shape.types.TRIMESH:\n        for (let i = 0; i < shape.indices.length / 3; i++) {\n          shape.getTriangleVertices(i, this.tmpVec0, this.tmpVec1, this.tmpVec2)\n          geo.vertices.push(\n            new THREE.Vector3(this.tmpVec0.x, this.tmpVec0.y, this.tmpVec0.z),\n            new THREE.Vector3(this.tmpVec1.x, this.tmpVec1.y, this.tmpVec1.z),\n            new THREE.Vector3(this.tmpVec2.x, this.tmpVec2.y, this.tmpVec2.z)\n          )\n          const j = geo.vertices.length - 3\n          geo.faces.push(new THREE.Face3(j, j + 1, j + 2))\n        }\n        geo.computeBoundingSphere()\n        geo.computeFaceNormals()\n        mesh = new THREE.Mesh(geo, material)\n        shape.geometryId = geo.id\n        break\n\n      case CANNON.Shape.types.HEIGHTFIELD:\n        for (let xi = 0; xi < shape.data.length - 1; xi++) {\n          for (let yi = 0; yi < shape.data[xi].length - 1; yi++) {\n            for (let k = 0; k < 2; k++) {\n              shape.getConvexTrianglePillar(xi, yi, k === 0)\n              this.tmpVec0.copy(shape.pillarConvex.vertices[0])\n              this.tmpVec1.copy(shape.pillarConvex.vertices[1])\n              this.tmpVec2.copy(shape.pillarConvex.vertices[2])\n              this.tmpVec0.vadd(shape.pillarOffset, this.tmpVec0)\n              this.tmpVec1.vadd(shape.pillarOffset, this.tmpVec1)\n              this.tmpVec2.vadd(shape.pillarOffset, this.tmpVec2)\n              geo.vertices.push(\n                new THREE.Vector3(this.tmpVec0.x, this.tmpVec0.y, this.tmpVec0.z),\n                new THREE.Vector3(this.tmpVec1.x, this.tmpVec1.y, this.tmpVec1.z),\n                new THREE.Vector3(this.tmpVec2.x, this.tmpVec2.y, this.tmpVec2.z)\n              )\n              const ii = geo.vertices.length - 3\n              geo.faces.push(new THREE.Face3(ii, ii + 1, ii + 2))\n            }\n          }\n        }\n        geo.computeBoundingSphere()\n        geo.computeFaceNormals()\n        mesh = new THREE.Mesh(geo, material)\n        shape.geometryId = geo.id\n        break\n      default:\n        break\n    }\n\n    if (mesh) {\n      this.scene.add(mesh)\n    }\n\n    return mesh\n  }\n\n  _typeMatch(mesh, shape) {\n    if (!mesh) {\n      return false\n    }\n    const geo = mesh.geometry\n    return (\n      (geo instanceof THREE.SphereGeometry && shape instanceof CANNON.Sphere) ||\n      (geo instanceof THREE.BoxGeometry && shape instanceof CANNON.Box) ||\n      (geo instanceof THREE.PlaneGeometry && shape instanceof CANNON.Plane) ||\n      (geo.id === shape.geometryId && shape instanceof CANNON.ConvexPolyhedron) ||\n      (geo.id === shape.geometryId && shape instanceof CANNON.Trimesh) ||\n      (geo.id === shape.geometryId && shape instanceof CANNON.Heightfield)\n    )\n  }\n\n  _scaleMesh(mesh, shape) {\n    const { radius } = shape\n\n    switch (shape.type) {\n      case CANNON.Shape.types.SPHERE:\n        mesh.scale.set(radius, radius, radius)\n        break\n\n      case CANNON.Shape.types.BOX:\n        mesh.scale.copy(shape.halfExtents)\n        mesh.scale.multiplyScalar(2)\n        break\n\n      case CANNON.Shape.types.CONVEXPOLYHEDRON:\n        mesh.scale.set(1, 1, 1)\n        break\n\n      case CANNON.Shape.types.TRIMESH:\n        mesh.scale.copy(shape.scale)\n        break\n\n      case CANNON.Shape.types.HEIGHTFIELD:\n        mesh.scale.set(1, 1, 1)\n        break\n      default:\n        break\n    }\n  }\n}\n","import * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport dataURIToBlob from 'datauritoblob'\nimport Stats from 'stats.js'\nimport State from 'controls-state'\nimport wrapGUI from 'controls-gui'\nimport { getGPUTier } from 'detect-gpu'\nimport { EffectComposer, RenderPass } from 'postprocessing'\nimport CannonDebugRenderer from './CannonDebugRenderer'\n\nexport default class WebGLApp {\n  #width\n  #height\n  isRunning = false\n  time = 0\n  dt = 0\n  #lastTime = performance.now()\n  #updateListeners = []\n\n  constructor({\n    background = '#111',\n    backgroundAlpha = 1,\n    fov = 45,\n    frustumSize = 3,\n    near = 0.01,\n    far = 100,\n    ...options\n  } = {}) {\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: !options.postprocessing,\n      alpha: false,\n      // enabled for saving screenshots of the canvas,\n      // may wish to disable this for perf reasons\n      preserveDrawingBuffer: true,\n      failIfMajorPerformanceCaveat: true,\n      ...options,\n    })\n    if (options.sortObjects !== undefined) {\n      this.renderer.sortObjects = options.sortObjects\n    }\n    if (options.gamma) {\n      this.renderer.outputEncoding = THREE.sRGBEncoding\n    }\n    if (options.xr) {\n      this.renderer.xr.enabled = true\n    }\n\n    this.canvas = this.renderer.domElement\n\n    this.renderer.setClearColor(background, backgroundAlpha)\n\n    // save the fixed dimensions\n    this.#width = options.width\n    this.#height = options.height\n\n    // clamp pixel ratio for performance\n    this.maxPixelRatio = options.maxPixelRatio || 2\n    // clamp delta to stepping anything too far forward\n    this.maxDeltaTime = options.maxDeltaTime || 1 / 30\n\n    // setup the camera\n    const aspect = this.#width / this.#height\n    if (!options.orthographic) {\n      this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far)\n    } else {\n      this.camera = new THREE.OrthographicCamera(\n        -(frustumSize * aspect) / 2,\n        (frustumSize * aspect) / 2,\n        frustumSize / 2,\n        -frustumSize / 2,\n        near,\n        far\n      )\n      this.camera.frustumSize = frustumSize\n    }\n    this.camera.position.copy(options.cameraPosition || new THREE.Vector3(0, 0, 4))\n    this.camera.lookAt(0, 0, 0)\n\n    this.scene = new THREE.Scene()\n\n    this.gl = this.renderer.getContext()\n\n    // handle resize events\n    window.addEventListener('resize', this.resize)\n    window.addEventListener('orientationchange', this.resize)\n\n    // force an initial resize event\n    this.resize()\n\n    // __________________________ADDONS__________________________\n\n    // really basic pointer events handler, the second argument\n    // contains the x and y relative to the top left corner\n    // of the canvas.\n    // In case of touches with multiple fingers, only the\n    // first touch is registered.\n    this.isDragging = false\n    this.canvas.addEventListener('pointerdown', (event) => {\n      if (!event.isPrimary) return\n      this.isDragging = true\n      // call onPointerDown method\n      this.scene.traverse((child) => {\n        if (typeof child.onPointerDown === 'function') {\n          child.onPointerDown(event, { x: event.offsetX, y: event.offsetY })\n        }\n      })\n    })\n    this.canvas.addEventListener('pointermove', (event) => {\n      if (!event.isPrimary) return\n      // call onPointerMove method\n      this.scene.traverse((child) => {\n        if (typeof child.onPointerMove === 'function') {\n          child.onPointerMove(event, { x: event.offsetX, y: event.offsetY })\n        }\n      })\n    })\n    this.canvas.addEventListener('pointerup', (event) => {\n      if (!event.isPrimary) return\n      this.isDragging = false\n      // call onPointerUp method\n      this.scene.traverse((child) => {\n        if (typeof child.onPointerUp === 'function') {\n          child.onPointerUp(event, { x: event.offsetX, y: event.offsetY })\n        }\n      })\n    })\n\n    // expose a composer for postprocessing passes\n    if (options.postprocessing) {\n      const maxMultisampling = this.gl.getParameter(this.gl.MAX_SAMPLES)\n      this.composer = new EffectComposer(this.renderer, {\n        multisampling: Math.min(8, maxMultisampling),\n        frameBufferType: options.gamma ? THREE.HalfFloatType : undefined,\n        ...options,\n      })\n      this.composer.addPass(new RenderPass(this.scene, this.camera))\n    }\n\n    // set up OrbitControls\n    if (options.orbitControls) {\n      this.orbitControls = new OrbitControls(this.camera, this.canvas)\n\n      this.orbitControls.enableDamping = true\n      this.orbitControls.dampingFactor = 0.15\n      this.orbitControls.enablePan = false\n\n      if (options.orbitControls instanceof Object) {\n        Object.keys(options.orbitControls).forEach((key) => {\n          this.orbitControls[key] = options.orbitControls[key]\n        })\n      }\n    }\n\n    // Attach the Cannon physics engine\n    if (options.world) {\n      this.world = options.world\n      if (options.showWorldWireframes) {\n        this.cannonDebugRenderer = new CannonDebugRenderer(this.scene, this.world)\n      }\n    }\n\n    // show the fps meter\n    if (options.showFps) {\n      this.stats = new Stats()\n      this.stats.showPanel(0)\n      document.body.appendChild(this.stats.dom)\n    }\n\n    // initialize the controls-state\n    if (options.controls) {\n      const controlsState = State(options.controls)\n      this.controls = options.hideControls\n        ? controlsState\n        : wrapGUI(controlsState, { expanded: !options.closeControls })\n\n      // add the custom controls-gui styles\n      if (!options.hideControls) {\n        const styles = `\n          [class^=\"controlPanel-\"] [class*=\"__field\"]::before {\n            content: initial !important;\n          }\n          [class^=\"controlPanel-\"] [class*=\"__labelText\"] {\n            text-indent: 6px !important;\n          }\n          [class^=\"controlPanel-\"] [class*=\"__field--button\"] > button::before {\n            content: initial !important;\n          }\n        `\n        const style = document.createElement('style')\n        style.type = 'text/css'\n        style.innerHTML = styles\n        document.head.appendChild(style)\n      }\n    }\n\n    // detect the gpu info\n    this.loadGPUTier = getGPUTier({ glContext: this.gl }).then((gpuTier) => {\n      this.gpu = {\n        name: gpuTier.gpu,\n        tier: gpuTier.tier,\n        isMobile: gpuTier.isMobile,\n        fps: gpuTier.fps,\n      }\n    })\n  }\n\n  get width() {\n    return this.#width || window.innerWidth\n  }\n\n  get height() {\n    return this.#height || window.innerHeight\n  }\n\n  get pixelRatio() {\n    return Math.min(this.maxPixelRatio, window.devicePixelRatio)\n  }\n\n  resize = ({ width = this.width, height = this.height, pixelRatio = this.pixelRatio } = {}) => {\n    // update pixel ratio if necessary\n    if (this.renderer.getPixelRatio() !== pixelRatio) {\n      this.renderer.setPixelRatio(pixelRatio)\n    }\n\n    // setup new size & update camera aspect if necessary\n    this.renderer.setSize(width, height)\n    if (this.camera.isPerspectiveCamera) {\n      this.camera.aspect = width / height\n    } else {\n      const aspect = width / height\n      this.camera.left = -(this.camera.frustumSize * aspect) / 2\n      this.camera.right = (this.camera.frustumSize * aspect) / 2\n      this.camera.top = this.camera.frustumSize / 2\n      this.camera.bottom = -this.camera.frustumSize / 2\n    }\n    this.camera.updateProjectionMatrix()\n\n    // resize also the composer, width and height\n    // are automatically extracted from the renderer\n    if (this.composer) {\n      this.composer.setSize()\n    }\n\n    // recursively tell all child objects to resize\n    this.scene.traverse((obj) => {\n      if (typeof obj.resize === 'function') {\n        obj.resize({\n          width,\n          height,\n          pixelRatio,\n        })\n      }\n    })\n\n    // draw a frame to ensure the new size has been registered visually\n    this.draw()\n    return this\n  }\n\n  // convenience function to trigger a PNG download of the canvas\n  saveScreenshot = ({ width = 2560, height = 1440, fileName = 'Screenshot.png' } = {}) => {\n    // force a specific output size\n    this.resize({ width, height, pixelRatio: 1 })\n    this.draw()\n\n    const dataURI = this.canvas.toDataURL('image/png')\n\n    // reset to default size\n    this.resize()\n    this.draw()\n\n    // save\n    saveDataURI(fileName, dataURI)\n  }\n\n  update = (dt, time, xrframe) => {\n    if (this.orbitControls) {\n      this.orbitControls.update()\n    }\n\n    // recursively tell all child objects to update\n    this.scene.traverse((obj) => {\n      if (typeof obj.update === 'function' && !obj.isTransformControls) {\n        obj.update(dt, time, xrframe)\n      }\n    })\n\n    if (this.world) {\n      // update the Cannon physics engine\n      this.world.step(1 / 60, dt)\n\n      // update the debug wireframe renderer\n      if (this.cannonDebugRenderer) {\n        this.cannonDebugRenderer.update()\n      }\n\n      // recursively tell all child bodies to update\n      this.world.bodies.forEach((body) => {\n        if (typeof body.update === 'function') {\n          body.update(dt, time)\n        }\n      })\n    }\n\n    // call the update listeners\n    this.#updateListeners.forEach((fn) => fn(dt, time, xrframe))\n\n    return this\n  }\n\n  onUpdate(fn) {\n    this.#updateListeners.push(fn)\n  }\n\n  offUpdate(fn) {\n    const index = this.#updateListeners.indexOf(fn)\n\n    // return silently if the function can't be found\n    if (index === -1) {\n      return\n    }\n\n    this.#updateListeners.splice(index, 1)\n  }\n\n  draw = () => {\n    if (this.composer) {\n      this.composer.render(this.dt)\n    } else {\n      this.renderer.render(this.scene, this.camera)\n    }\n    return this\n  }\n\n  start = () => {\n    if (this.isRunning) return\n    this.renderer.setAnimationLoop(this.animate)\n    this.isRunning = true\n    return this\n  }\n\n  stop = () => {\n    if (!this.isRunning) return\n    this.renderer.setAnimationLoop(null)\n    this.isRunning = false\n    return this\n  }\n\n  animate = (now, xrframe) => {\n    if (!this.isRunning) return\n\n    if (this.stats) this.stats.begin()\n\n    this.dt = Math.min(this.maxDeltaTime, (now - this.#lastTime) / 1000)\n    this.time += this.dt\n    this.#lastTime = now\n    this.update(this.dt, this.time, xrframe)\n    this.draw()\n\n    if (this.stats) this.stats.end()\n  }\n\n  get cursor() {\n    return this.canvas.style.cursor\n  }\n\n  set cursor(cursor) {\n    if (cursor) {\n      this.canvas.style.cursor = cursor\n    } else {\n      this.canvas.style.cursor = null\n    }\n  }\n}\n\nfunction saveDataURI(name, dataURI) {\n  const blob = dataURIToBlob(dataURI)\n\n  // force download\n  const link = document.createElement('a')\n  link.download = name\n  link.href = window.URL.createObjectURL(blob)\n  link.onclick = setTimeout(() => {\n    window.URL.revokeObjectURL(blob)\n    link.removeAttribute('href')\n  }, 0)\n\n  link.click()\n}\n","import * as THREE from 'three'\nimport loadImage from 'image-promise'\n\nexport default async function loadTexture(url, options) {\n  const texture = new THREE.Texture()\n  texture.name = url\n  texture.encoding = options.encoding || THREE.LinearEncoding\n  setTextureParams(url, texture, options)\n\n  try {\n    const image = await loadImage(url, { crossorigin: 'anonymous' })\n\n    texture.image = image\n    texture.needsUpdate = true\n    if (options.renderer) {\n      // Force texture to be uploaded to GPU immediately,\n      // this will avoid \"jank\" on first rendered frame\n      options.renderer.initTexture(texture)\n    }\n    return texture\n  } catch (err) {\n    throw new Error(`Could not load texture ${url}`)\n  }\n}\n\nfunction setTextureParams(url, texture, opt) {\n  if (typeof opt.flipY === 'boolean') texture.flipY = opt.flipY\n  if (typeof opt.mapping !== 'undefined') {\n    texture.mapping = opt.mapping\n  }\n  if (typeof opt.format !== 'undefined') {\n    texture.format = opt.format\n  } else {\n    // choose a nice default format\n    const isJPEG = url.search(/\\.(jpg|jpeg)$/) > 0 || url.search(/^data:image\\/jpeg/) === 0\n    texture.format = isJPEG ? THREE.RGBFormat : THREE.RGBAFormat\n  }\n  if (opt.repeat) texture.repeat.copy(opt.repeat)\n  texture.wrapS = opt.wrapS || THREE.ClampToEdgeWrapping\n  texture.wrapT = opt.wrapT || THREE.ClampToEdgeWrapping\n  texture.minFilter = opt.minFilter || THREE.LinearMipMapLinearFilter\n  texture.magFilter = opt.magFilter || THREE.LinearFilter\n  texture.generateMipmaps = opt.generateMipmaps !== false\n}\n","import * as THREE from 'three'\nimport highestPowerOfTwo from 'highest-power-two'\nimport { HDRCubeTextureLoader } from 'three/examples/jsm/loaders/HDRCubeTextureLoader'\nimport loadTexture from './loadTexture'\n\nexport default async function loadEnvMap(url, options) {\n  const renderer = options.renderer\n\n  if (!renderer) {\n    throw new Error(`Env map requires renderer to passed in the options for ${url}!`)\n  }\n\n  if (options.equirectangular) {\n    const texture = await loadTexture(url, { renderer })\n\n    if (options.pmrem) {\n      return pmremEquirectangular(texture, renderer)\n    } else {\n      const size = highestPowerOfTwo(texture.image.naturalHeight)\n      const renderTarget = new THREE.WebGLCubeRenderTarget(size, {\n        generateMipmaps: true,\n        minFilter: THREE.LinearMipmapLinearFilter,\n        magFilter: THREE.LinearFilter,\n      })\n\n      const outTexture = renderTarget.fromEquirectangularTexture(renderer, texture).texture\n\n      texture.dispose() // dispose original texture\n      texture.image.data = null // remove image reference\n\n      return outTexture\n    }\n  }\n\n  const basePath = url\n  const extension = options.extension || '.jpg'\n  const urls = generateCubeUrls(`${basePath.replace(/\\/$/, '')}/`, extension)\n\n  if (extension === '.hdr') {\n    // load a float HDR texture\n    return new Promise((resolve, reject) => {\n      new HDRCubeTextureLoader().load(\n        THREE.UnsignedByteType,\n        urls,\n        (cubeMap) => resolve(assignCubemapOptions(cubeMap, options)),\n        null,\n        () => reject(new Error(`Could not load env map: ${basePath}`))\n      )\n    })\n  }\n\n  // load a RGBM encoded texture\n  return new Promise((resolve, reject) => {\n    new THREE.CubeTextureLoader().load(\n      urls,\n      (cubeMap) => resolve(assignCubemapOptions(cubeMap, options)),\n      null,\n      () => reject(new Error(`Could not load env map: ${basePath}`))\n    )\n  })\n}\n\nfunction assignCubemapOptions(cubeMap, options) {\n  if (options.encoding) {\n    cubeMap.encoding = options.encoding\n  }\n  if (options.format) {\n    cubeMap.format = options.format\n  }\n  if (options.pmrem) {\n    cubeMap = pmremCubemap(cubeMap, options.renderer)\n  }\n  return cubeMap\n}\n\n// prefilter the environment map for irradiance\nfunction pmremEquirectangular(texture, renderer) {\n  const pmremGenerator = new THREE.PMREMGenerator(renderer)\n  pmremGenerator.compileEquirectangularShader()\n\n  const cubeRenderTarget = pmremGenerator.fromEquirectangular(texture)\n\n  pmremGenerator.dispose() // dispose PMREMGenerator\n  texture.dispose() // dispose original texture\n  texture.image.data = null // remove image reference\n\n  return cubeRenderTarget.texture\n}\n\n// prefilter the environment map for irradiance\nfunction pmremCubemap(cubeMap, renderer) {\n  const pmremGenerator = new THREE.PMREMGenerator(renderer)\n  pmremGenerator.compileCubemapShader()\n  const renderTarget = pmremGenerator.fromCubemap(cubeMap)\n\n  pmremGenerator.dispose() // dispose PMREMGenerator\n  cubeMap.dispose() // dispose original texture\n  cubeMap.image.data = null // remove image reference\n\n  return renderTarget.texture\n}\n\nfunction generateCubeUrls(prefix, postfix) {\n  return [\n    `${prefix}px${postfix}`,\n    `${prefix}nx${postfix}`,\n    `${prefix}py${postfix}`,\n    `${prefix}ny${postfix}`,\n    `${prefix}pz${postfix}`,\n    `${prefix}nz${postfix}`,\n  ]\n}\n","import pMap from 'p-map'\nimport prettyMs from 'pretty-ms'\nimport loadImage from 'image-promise'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport loadTexture from './loadTexture'\nimport loadEnvMap from './loadEnvMap'\n\nclass AssetManager {\n  #queue = []\n  #cache = {}\n  #onProgressListeners = []\n  #asyncConcurrency = 10\n  #logs = []\n\n  addProgressListener(fn) {\n    if (typeof fn !== 'function') {\n      throw new TypeError('onProgress must be a function')\n    }\n    this.#onProgressListeners.push(fn)\n  }\n\n  // Add an asset to be queued, input: { url, type, ...options }\n  queue({ url, type, ...options }) {\n    if (!url) throw new TypeError('Must specify a URL or opt.url for AssetManager.queue()')\n    if (!this._getQueued(url)) {\n      this.#queue.push({ url, type: type || this._extractType(url), ...options })\n    }\n\n    return url\n  }\n\n  _getQueued(url) {\n    return this.#queue.find((item) => item.url === url)\n  }\n\n  _extractType(url) {\n    const ext = url.slice(url.lastIndexOf('.'))\n\n    switch (true) {\n      case /\\.(gltf|glb)$/i.test(ext):\n        return 'gltf'\n      case /\\.json$/i.test(ext):\n        return 'json'\n      case /\\.svg$/i.test(ext):\n        return 'svg'\n      case /\\.(jpe?g|png|gif|bmp|tga|tif)$/i.test(ext):\n        return 'image'\n      case /\\.(wav|mp3)$/i.test(ext):\n        return 'audio'\n      case /\\.(mp4|webm|ogg|ogv)$/i.test(ext):\n        return 'video'\n      default:\n        throw new Error(`Could not load ${url}, unknown file extension!`)\n    }\n  }\n\n  // Fetch a loaded asset by URL\n  get = (url) => {\n    if (!url) throw new TypeError('Must specify an URL for AssetManager.get()')\n\n    return this.#cache[url]\n  }\n\n  // Loads a single asset\n  async loadSingle({ renderer, ...item }) {\n    // renderer is used to load textures and env maps,\n    // but require it always since it is an extensible pattern\n    if (!renderer) {\n      throw new Error('You must provide a renderer to the loadSingle function.')\n    }\n\n    try {\n      const itemLoadingStart = Date.now()\n\n      this.#cache[item.url] = await this._loadItem({ renderer, ...item })\n\n      if (window.DEBUG) {\n        console.log(\n          `📦 Loaded single asset %c${item.url}%c in ${prettyMs(Date.now() - itemLoadingStart)}`,\n          'color:blue',\n          'color:black'\n        )\n      }\n\n      return item.url\n    } catch (err) {\n      delete this.#cache[item.url]\n      console.error(`📦 Asset ${item.url} was not loaded:\\n${err}`)\n    }\n  }\n\n  // Loads all queued assets\n  async load({ renderer }) {\n    // renderer is used to load textures and env maps,\n    // but require it always since it is an extensible pattern\n    if (!renderer) {\n      throw new Error('You must provide a renderer to the load function.')\n    }\n\n    const queue = this.#queue.slice()\n    this.#queue.length = 0 // clear queue\n\n    const total = queue.length\n    if (total === 0) {\n      // resolve first this functions and then call the progress listeners\n      setTimeout(() => this.#onProgressListeners.forEach((fn) => fn(1)), 0)\n      return\n    }\n\n    const loadingStart = Date.now()\n\n    await pMap(\n      queue,\n      async (item, i) => {\n        try {\n          const itemLoadingStart = Date.now()\n\n          this.#cache[item.url] = await this._loadItem({ renderer, ...item })\n\n          if (window.DEBUG) {\n            this.log(\n              `Loaded %c${item.url}%c in ${prettyMs(Date.now() - itemLoadingStart)}`,\n              'color:blue',\n              'color:black'\n            )\n          }\n        } catch (err) {\n          this.logError(`Asset ${item.url} was not loaded:\\n${err}`)\n        }\n\n        const percent = (i + 1) / total\n        this.#onProgressListeners.forEach((fn) => fn(percent))\n      },\n      { concurrency: this.#asyncConcurrency }\n    )\n\n    if (window.DEBUG) {\n      const errors = this.#logs.filter((log) => log.type === 'error')\n\n      if (errors.length === 0) {\n        this.groupLog(`📦 Assets loaded in ${prettyMs(Date.now() - loadingStart)} ⏱`)\n      } else {\n        this.groupLog(\n          `📦 %c Could not load ${errors.length} asset${errors.length > 1 ? 's' : ''} `,\n          'color:white;background:red;'\n        )\n      }\n    }\n  }\n\n  // Loads a single asset on demand, returning from\n  // cache if it exists otherwise adding it to the cache\n  // after loading.\n  _loadItem({ url, type, renderer, ...options }) {\n    if (url in this.#cache) {\n      return this.#cache[url]\n    }\n\n    switch (type) {\n      case 'gltf':\n        return new Promise((resolve, reject) => {\n          new GLTFLoader().load(url, resolve, null, (err) =>\n            reject(new Error(`Could not load GLTF asset ${url}:\\n${err}`))\n          )\n        })\n      case 'json':\n        return fetch(url).then((response) => response.json())\n      case 'env-map':\n        return loadEnvMap(url, { renderer, ...options })\n      case 'svg':\n      case 'image':\n        return loadImage(url, { crossorigin: 'anonymous' })\n      case 'texture':\n        return loadTexture(url, { renderer, ...options })\n      case 'audio':\n        // You might not want to load big audio files and\n        // store them in memory, that might be inefficient.\n        // Rather load them outside of the queue\n        return fetch(url).then((response) => response.arrayBuffer())\n      case 'video':\n        // You might not want to load big video files and\n        // store them in memory, that might be inefficient.\n        // Rather load them outside of the queue\n        return fetch(url).then((response) => response.blob())\n      default:\n        throw new Error(`Could not load ${url}, the type ${type} is unknown!`)\n    }\n  }\n\n  log(...text) {\n    this.#logs.push({ type: 'log', text })\n  }\n\n  logError(...text) {\n    this.#logs.push({ type: 'error', text })\n  }\n\n  groupLog(...text) {\n    console.groupCollapsed(...text)\n    this.#logs.forEach((log) => {\n      console[log.type](...log.text)\n    })\n    console.groupEnd()\n\n    this.#logs.length = 0 // clear logs\n  }\n}\n\n// asset manager is a singleton, you can require it from\n// different files and use the same instance.\n// A plain js object would have worked just fine,\n// fucking java patterns\nexport default new AssetManager()\n","import * as THREE from 'three'\nimport assets from '../lib/AssetManager'\n\n// elaborated three.js component example\n// containing example usage of\n//   - asset manager\n//   - control panel\n//   - touch events\n//   - postprocessing\n//   - screenshot saving\n\n// preload the suzanne model\nconst suzanneKey = assets.queue({\n  url: 'assets/suzanne.gltf',\n  type: 'gltf',\n})\n\n// preload the materials\nconst albedoKey = assets.queue({\n  url: 'assets/spotty-metal/albedo.jpg',\n  type: 'texture',\n})\nconst metalnessKey = assets.queue({\n  url: 'assets/spotty-metal/metalness.jpg',\n  type: 'texture',\n})\nconst roughnessKey = assets.queue({\n  url: 'assets/spotty-metal/roughness.jpg',\n  type: 'texture',\n})\nconst normalKey = assets.queue({\n  url: 'assets/spotty-metal/normal.jpg',\n  type: 'texture',\n})\n\n// preload the environment map\nconst hdrKey = assets.queue({\n  url: 'assets/ouside-afternoon-blurred-hdr.jpg',\n  type: 'env-map',\n  // equirectangular means it's just one image, projected\n  equirectangular: true,\n})\n\nexport default class Suzanne extends THREE.Group {\n  constructor(webgl, options) {\n    super(options)\n    this.webgl = webgl\n    this.options = options\n\n    const suzanneGltf = assets.get(suzanneKey)\n    const suzanne = suzanneGltf.scene.clone()\n\n    const material = new THREE.MeshStandardMaterial({\n      map: assets.get(albedoKey),\n      metalnessMap: assets.get(metalnessKey),\n      roughnessMap: assets.get(roughnessKey),\n      normalMap: assets.get(normalKey),\n      normalScale: new THREE.Vector2(2, 2),\n      envMap: assets.get(hdrKey),\n      roughness: 0.5,\n      metalness: 0.8,\n    })\n\n    // apply the material to the model\n    suzanne.traverse((child) => {\n      if (child.isMesh) {\n        child.material = material\n      }\n    })\n\n    // make it a little bigger\n    suzanne.scale.multiplyScalar(1.2)\n\n    this.add(suzanne)\n\n    // set the background as the hdr\n    this.webgl.scene.background = assets.get(hdrKey)\n  }\n\n  onPointerDown(event, { x, y }) {\n    // for example, check of we clicked on an\n    // object with raycasting\n    const coords = new THREE.Vector2().set(\n      (x / this.webgl.width) * 2 - 1,\n      (-y / this.webgl.height) * 2 + 1\n    )\n    const raycaster = new THREE.Raycaster()\n    raycaster.setFromCamera(coords, this.webgl.camera)\n    const hits = raycaster.intersectObject(this, true)\n    console.log(hits.length > 0 ? `Hit ${hits[0].object.name}!` : 'No hit')\n  }\n\n  onPointerMove(event, { x, y }) {}\n\n  onPointerUp(event, { x, y }) {}\n\n  update(dt, time) {\n    this.rotation.y += dt * this.webgl.controls.angularVelocity\n  }\n}\n\n// demo the save screenshot feature\nexport function addScreenshotButton(webgl) {\n  const screenshotButton = document.createElement('div')\n\n  // normally the styles would be in style.css\n  screenshotButton.style.position = 'fixed'\n  screenshotButton.style.bottom = 0\n  screenshotButton.style.right = 0\n  screenshotButton.style.background = 'tomato'\n  screenshotButton.style.cursor = 'pointer'\n  screenshotButton.style.padding = '8px 16px'\n  screenshotButton.style.color = 'white'\n  screenshotButton.style.fontSize = '24px'\n\n  screenshotButton.textContent = 'Save screenshot'\n  document.body.appendChild(screenshotButton)\n  screenshotButton.addEventListener('click', webgl.saveScreenshot)\n}\n","export default \"#define GLSLIFY 1\\nout vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n\";","import { ShaderChunk } from 'three'\n\n// Modified ShaderChunk.skinning_pars_vertex to handle\n// a second set of bone information from the previou frame\nexport const prev_skinning_pars_vertex = /* glsl */ `\n  #ifdef USE_SKINNING\n  #ifdef BONE_TEXTURE\n    uniform sampler2D prevBoneTexture;\n    mat4 getPrevBoneMatrix( const in float i ) {\n      float j = i * 4.0;\n      float x = mod( j, float( boneTextureSize ) );\n      float y = floor( j / float( boneTextureSize ) );\n      float dx = 1.0 / float( boneTextureSize );\n      float dy = 1.0 / float( boneTextureSize );\n      y = dy * ( y + 0.5 );\n      vec4 v1 = texture2D( prevBoneTexture, vec2( dx * ( x + 0.5 ), y ) );\n      vec4 v2 = texture2D( prevBoneTexture, vec2( dx * ( x + 1.5 ), y ) );\n      vec4 v3 = texture2D( prevBoneTexture, vec2( dx * ( x + 2.5 ), y ) );\n      vec4 v4 = texture2D( prevBoneTexture, vec2( dx * ( x + 3.5 ), y ) );\n      mat4 bone = mat4( v1, v2, v3, v4 );\n      return bone;\n    }\n  #else\n    uniform mat4 prevBoneMatrices[ MAX_BONES ];\n    mat4 getPrevBoneMatrix( const in float i ) {\n      mat4 bone = prevBoneMatrices[ int(i) ];\n      return bone;\n    }\n  #endif\n  #endif\n`\n\n// Returns the body of the vertex shader for the velocity buffer and\n// outputs the position of the current and last frame positions\nexport const velocity_vertex = /* glsl */ `\n  vec3 transformed;\n\n  // Get the normal\n  ${ShaderChunk.skinbase_vertex}\n  ${ShaderChunk.beginnormal_vertex}\n  ${ShaderChunk.skinnormal_vertex}\n  ${ShaderChunk.defaultnormal_vertex}\n\n  // Get the current vertex position\n  transformed = vec3( position );\n  ${ShaderChunk.skinning_vertex}\n  newPosition = modelViewMatrix * vec4(transformed, 1.0);\n\n  // Get the previous vertex position\n  transformed = vec3( position );\n  ${ShaderChunk.skinbase_vertex\n    .replace(/mat4 /g, '')\n    .replace(/getBoneMatrix/g, 'getPrevBoneMatrix')}\n  ${ShaderChunk.skinning_vertex.replace(/vec4 /g, '')}\n  prevPosition = prevModelViewMatrix * vec4(transformed, 1.0);\n\n  // The delta between frames\n  vec3 delta = newPosition.xyz - prevPosition.xyz;\n  vec3 direction = normalize(delta);\n\n  // Stretch along the velocity axes\n  // TODO: Can we combine the stretch and expand\n  float stretchDot = dot(direction, transformedNormal);\n  vec4 expandDir = vec4(direction, 0.0) * stretchDot * expandGeometry * length(delta);\n  vec4 newPosition2 =  projectionMatrix * (newPosition + expandDir);\n  vec4 prevPosition2 = prevProjectionMatrix * (prevPosition + expandDir);\n\n  newPosition =  projectionMatrix * newPosition;\n  prevPosition = prevProjectionMatrix * prevPosition;\n\n  gl_Position = mix(newPosition2, prevPosition2, interpolateGeometry * (1.0 - step(0.0, stretchDot) ) );\n`\n","import { Matrix4, ShaderChunk } from 'three'\nimport { prev_skinning_pars_vertex, velocity_vertex } from './MotionBlurShaderChunks'\n\nexport const VelocityShader = {\n  uniforms: {\n    prevProjectionMatrix: {\n      value: new Matrix4(),\n    },\n\n    prevModelViewMatrix: {\n      value: new Matrix4(),\n    },\n\n    prevBoneTexture: {\n      value: null,\n    },\n\n    expandGeometry: {\n      value: 0,\n    },\n\n    interpolateGeometry: {\n      value: 1,\n    },\n\n    smearIntensity: {\n      value: 1,\n    },\n  },\n\n  vertexShader: `\n    ${ShaderChunk.skinning_pars_vertex}\n    ${prev_skinning_pars_vertex}\n\n    uniform mat4 prevProjectionMatrix;\n    uniform mat4 prevModelViewMatrix;\n    uniform float expandGeometry;\n    uniform float interpolateGeometry;\n    varying vec4 prevPosition;\n    varying vec4 newPosition;\n\n    void main() {\n\n      ${velocity_vertex}\n\n    }\n  `,\n\n  fragmentShader: `\n    uniform float smearIntensity;\n    varying vec4 prevPosition;\n    varying vec4 newPosition;\n\n    void main() {\n\n      // NOTE: It seems the velociyt is incorrectly calculated here -- see the velocity pass\n      // in shader replacement to see how to compute velocities in screen uv space.\n      vec3 vel;\n      vel = (newPosition.xyz / newPosition.w) - (prevPosition.xyz / prevPosition.w);\n\n      gl_FragColor = vec4(vel * smearIntensity, 1.0);\n    }\n  `,\n}\n","import { Matrix4, ShaderChunk } from 'three'\nimport { prev_skinning_pars_vertex, velocity_vertex } from './MotionBlurShaderChunks.js'\n\nexport const GeometryShader = {\n  uniforms: {\n    prevProjectionMatrix: {\n      value: new Matrix4(),\n    },\n\n    prevModelViewMatrix: {\n      value: new Matrix4(),\n    },\n\n    prevBoneTexture: {\n      value: null,\n    },\n\n    expandGeometry: {\n      value: 0,\n    },\n\n    interpolateGeometry: {\n      value: 1,\n    },\n\n    smearIntensity: {\n      value: 1,\n    },\n  },\n\n  vertexShader: /* glsl */ `\n    ${ShaderChunk.skinning_pars_vertex}\n    ${prev_skinning_pars_vertex}\n\n    uniform mat4 prevProjectionMatrix;\n    uniform mat4 prevModelViewMatrix;\n    uniform float expandGeometry;\n    uniform float interpolateGeometry;\n    varying vec4 prevPosition;\n    varying vec4 newPosition;\n    varying vec3 color;\n\n    void main() {\n\n      ${velocity_vertex}\n\n      color = (modelViewMatrix * vec4(normal.xyz, 0)).xyz;\n      color = normalize(color);\n\n    }\n  `,\n\n  fragmentShader: /* glsl */ `\n    varying vec3 color;\n\n    void main() {\n      gl_FragColor = vec4(color, 1);\n    }\n  `,\n}\n","export const CompositeShader = {\n  defines: {\n    SAMPLES: 30,\n    JITTER_STRATEGY: 1,\n    BLUENOISE_SIZE: '32.0',\n  },\n\n  uniforms: {\n    sourceBuffer: {\n      value: null,\n    },\n\n    velocityBuffer: {\n      value: null,\n    },\n\n    jitter: {\n      value: 1,\n    },\n\n    blueNoiseTex: {\n      value: null,\n    },\n  },\n\n  vertexShader: /* glsl */ `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }\n  `,\n\n  fragmentShader: /* glsl */ `\n    varying vec2 vUv;\n    uniform sampler2D sourceBuffer;\n    uniform sampler2D velocityBuffer;\n    uniform float jitter;\n\n    #if JITTER_STRATEGY == 2 // blue noise\n    uniform sampler2D blueNoiseTex;\n    #endif\n\n    #include <common>\n    void main() {\n\n      vec2 vel = texture2D( velocityBuffer, vUv ).xy;\n\n      #if JITTER_STRATEGY == 0 // Regular Jitter\n      float jitterValue = mod( ( gl_FragCoord.x + gl_FragCoord.y ) * 0.25, 1.0 );\n      #elif JITTER_STRATEGY == 1 // Random Jitter\n      float jitterValue = rand( gl_FragCoord.xy * 0.01 );\n      #elif JITTER_STRATEGY == 2 // Blue Noise Jitter\n      float jitterValue = texture2D( blueNoiseTex, gl_FragCoord.xy / BLUENOISE_SIZE ).r;\n      #endif\n\n      vec2 jitterOffset = jitter * vel * vec2( jitterValue ) / float( SAMPLES );\n      vec4 result;\n\n      vec2 startUv = clamp( vUv - vel * 0.5 + jitterOffset, 0.0, 1.0 );\n      vec2 endUv = clamp( vUv + vel * 0.5 + jitterOffset, 0.0, 1.0 );\n      for( int i = 0; i < SAMPLES; i ++ ) {\n\n        vec2 sampleUv = mix( startUv, endUv, float( i ) / float( SAMPLES ) );\n        result += texture2D( sourceBuffer, sampleUv );\n\n      }\n\n      result /= float( SAMPLES );\n\n      gl_FragColor = result;\n\n    }\n  `,\n}\n","/**\n * @author Garrett Johnson / http://gkjohnson.github.io/\n * Source https://github.com/gkjohnson/threejs-sandbox/tree/master/motionBlurPass\n * Approach from http://john-chapman-graphics.blogspot.com/2013/01/per-object-motion-blur.html\n */\nimport {\n  Frustum,\n  Color,\n  WebGLRenderTarget,\n  LinearFilter,\n  RGBFormat,\n  HalfFloatType,\n  Matrix4,\n  DataTexture,\n  RGBAFormat,\n  FloatType,\n  ShaderMaterial,\n  UnsignedByteType,\n} from 'three'\nimport { Pass } from 'postprocessing'\nimport { Pass as ThreePass } from 'three/examples/jsm/postprocessing/Pass'\nimport { VelocityShader } from './VelocityShader'\nimport { GeometryShader } from './GeometryShader'\nimport { CompositeShader } from './CompositeShader'\n// import { BlueNoiseGenerator } from '../BlueNoiseGenerator/BlueNoiseGenerator'\nimport { traverseVisibleMeshes } from './utils'\n\nconst _blackColor = new Color(0, 0, 0)\nconst _defaultOverrides = {}\n\n// // Generate Blue Noise Textures\n// const generator = new BlueNoiseGenerator()\n// generator.size = 32\n\n// const data = new Uint8Array(32 ** 2 * 4)\n// for (let i = 0, l = 1; i < l; i++) {\n//   const result = generator.generate()\n//   const bin = result.data\n//   const maxValue = result.maxValue\n\n//   for (let j = 0, l2 = bin.length; j < l2; j++) {\n//     const value = 255 * (bin[j] / maxValue)\n//     data[j * 3 + i] = value\n//   }\n// }\n\n// // TODO: Why won't RedFormat work here?\n// const blueNoiseTex = new DataTexture(data, generator.size, generator.size, RGBFormat)\n// blueNoiseTex.wrapS = RepeatWrapping\n// blueNoiseTex.wrapT = RepeatWrapping\n// blueNoiseTex.minFilter = LinearFilter\n\nexport class MotionBlurPass extends Pass {\n  get enabled() {\n    return this._enabled\n  }\n\n  set enabled(val) {\n    if (val === false) {\n      this._prevPosMap.clear()\n      this._cameraMatricesNeedInitializing = true\n    }\n\n    this._enabled = val\n  }\n\n  constructor(scene, camera, options = {}) {\n    super()\n\n    // settings\n    this.samples = 'samples' in options ? options.samples : 15\n    this.expandGeometry = 'expandGeometry' in options ? options.expandGeometry : 0\n    this.interpolateGeometry = 'interpolateGeometry' in options ? options.interpolateGeometry : 1\n    this.smearIntensity = 'smearIntensity' in options ? options.smearIntensity : 1\n    this.blurTransparent = 'blurTransparent' in options ? options.blurTransparent : false\n    this.renderCameraBlur = 'renderCameraBlur' in options ? options.renderCameraBlur : true\n    this.renderTargetScale = 'renderTargetScale' in options ? options.renderTargetScale : 1\n    this.jitter = 'jitter' in options ? options.jitter : 1\n    this.jitterStrategy =\n      'jitterStrategy' in options ? options.jitterStrategy : MotionBlurPass.RANDOM_JITTER\n\n    this.debug = {\n      display: MotionBlurPass.DEFAULT,\n      dontUpdateState: false,\n    }\n\n    this.scene = scene\n    this.camera = camera\n\n    // list of positions from previous frames\n    this._prevPosMap = new Map()\n    this._currentFrameMod = 0\n    this._frustum = new Frustum()\n    this._projScreenMatrix = new Matrix4()\n    this._cameraMatricesNeedInitializing = true\n\n    this._prevCamProjection = new Matrix4()\n    this._prevCamWorldInverse = new Matrix4()\n\n    // render targets\n    this._velocityBuffer = new WebGLRenderTarget(\n      256 * this.renderTargetScale,\n      256 * this.renderTargetScale,\n      {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        type: HalfFloatType,\n      }\n    )\n    this._velocityBuffer.texture.name = 'MotionBlurPass.Velocity'\n    this._velocityBuffer.texture.generateMipmaps = false\n\n    this._compositeMaterial = new ShaderMaterial(CompositeShader)\n    this._compositeQuad = new ThreePass.FullScreenQuad(this._compositeMaterial)\n  }\n\n  initialize(renderer, alpha, frameBufferType) {\n    if (!alpha && frameBufferType === UnsignedByteType) {\n      this._velocityBuffer.texture.format = RGBFormat\n    }\n\n    if (frameBufferType !== undefined) {\n      this._velocityBuffer.texture.type = frameBufferType\n    }\n  }\n\n  // Pass API\n  dispose() {\n    super.dispose()\n    this._compositeQuad.dispose()\n    this._velocityBuffer.dispose()\n    this._prevPosMap.clear()\n  }\n\n  setSize(width, height) {\n    const renderTargetScale = this.renderTargetScale\n    const velocityBuffer = this._velocityBuffer\n    velocityBuffer.setSize(width * renderTargetScale, height * renderTargetScale)\n  }\n\n  render(renderer, readBuffer, writeBuffer) {\n    const debug = this.debug\n    const scene = this.scene\n    const camera = this.camera\n    const compositeQuad = this._compositeQuad\n    const finalBuffer = this.renderToScreen ? null : writeBuffer\n\n    // Set the clear state\n    renderer.autoClear = false\n    renderer.setClearColor(_blackColor, 0)\n\n    // TODO: This is getting called just to set 'currentRenderState' in the renderer\n    // NOTE -- why do we need this?\n    renderer.compile(scene, camera)\n    this._ensurePrevCameraTransform()\n\n    switch (debug.display) {\n      case MotionBlurPass.GEOMETRY: {\n        renderer.setRenderTarget(finalBuffer)\n        renderer.clear()\n        this._drawAllMeshes(renderer, MotionBlurPass.GEOMETRY, !debug.dontUpdateState)\n        break\n      }\n\n      case MotionBlurPass.VELOCITY: {\n        renderer.setRenderTarget(finalBuffer)\n        renderer.clear()\n        this._drawAllMeshes(renderer, MotionBlurPass.VELOCITY, !debug.dontUpdateState)\n        break\n      }\n\n      case MotionBlurPass.DEFAULT: {\n        const velocityBuffer = this._velocityBuffer\n        renderer.setRenderTarget(velocityBuffer)\n        renderer.clear()\n        this._drawAllMeshes(renderer, MotionBlurPass.VELOCITY, !debug.dontUpdateState)\n\n        const compositeMaterial = this._compositeMaterial\n        const uniforms = compositeMaterial.uniforms\n        uniforms.sourceBuffer.value = readBuffer.texture\n        uniforms.velocityBuffer.value = this._velocityBuffer.texture\n        uniforms.jitter.value = this.jitter\n        // uniforms.blueNoiseTex.value = blueNoiseTex\n\n        if (compositeMaterial.defines.SAMPLES !== this.samples) {\n          compositeMaterial.defines.SAMPLES = Math.max(0, Math.floor(this.samples))\n          compositeMaterial.needsUpdate = true\n        }\n\n        if (compositeMaterial.defines.JITTER_STRATEGY !== this.jitterStrategy) {\n          compositeMaterial.defines.JITTER_STRATEGY = this.jitterStrategy\n          compositeMaterial.needsUpdate = true\n        }\n\n        renderer.setRenderTarget(finalBuffer)\n        compositeQuad.render(renderer)\n\n        break\n      }\n    }\n\n    // Save the camera state for the next frame\n    this._prevCamWorldInverse.copy(camera.matrixWorldInverse)\n    this._prevCamProjection.copy(camera.projectionMatrix)\n  }\n\n  // Returns the set of previous frames data for object position and bone state. Creates\n  // a new object this with frames state if it hasn't been created yet.\n  _getPreviousFrameState(obj) {\n    const prevPosMap = this._prevPosMap\n    let data = prevPosMap.get(obj)\n    if (data === undefined) {\n      data = {\n        lastUsedFrame: -1,\n        matrixWorld: obj.matrixWorld.clone(),\n        geometryMaterial: new ShaderMaterial(GeometryShader),\n        velocityMaterial: new ShaderMaterial(VelocityShader),\n        boneMatrices: null,\n        boneTexture: null,\n      }\n      prevPosMap.set(obj, data)\n    }\n\n    const isSkinned =\n      obj.type === 'SkinnedMesh' && obj.skeleton && obj.skeleton.bones && obj.skeleton.boneMatrices\n\n    data.geometryMaterial.skinning = isSkinned\n    data.velocityMaterial.skinning = isSkinned\n\n    // copy the skeleton state into the prevBoneTexture uniform\n    const skeleton = obj.skeleton\n    const boneTextureNeedsUpdate =\n      data.boneMatrices === null || data.boneMatrices.length !== skeleton.boneMatrices.length\n    if (isSkinned && boneTextureNeedsUpdate) {\n      const boneMatrices = new Float32Array(skeleton.boneMatrices.length)\n      boneMatrices.set(skeleton.boneMatrices)\n      data.boneMatrices = boneMatrices\n\n      const size = Math.sqrt(skeleton.boneMatrices.length / 4)\n      const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType)\n      boneTexture.needsUpdate = true\n\n      data.geometryMaterial.uniforms.prevBoneTexture.value = boneTexture\n      data.velocityMaterial.uniforms.prevBoneTexture.value = boneTexture\n      data.boneTexture = boneTexture\n    }\n\n    return data\n  }\n\n  // saves the current state to be used next frame\n  _saveCurrentObjectState(obj) {\n    const prevPosMap = this._prevPosMap\n    const data = prevPosMap.get(obj)\n\n    if (data.boneMatrices !== null) {\n      data.boneMatrices.set(obj.skeleton.boneMatrices)\n      data.boneTexture.needsUpdate = true\n    }\n\n    data.matrixWorld.copy(obj.matrixWorld)\n  }\n\n  // Draw all meshes in the scene and discard those that are no longer being used\n  _drawAllMeshes(renderer, type, saveState) {\n    this._currentFrameMod = (this._currentFrameMod + 1) % 2\n    const thisFrameId = this._currentFrameMod\n    const prevPosMap = this._prevPosMap\n\n    traverseVisibleMeshes(this.scene, (mesh) => {\n      this._drawMesh(renderer, mesh, type, saveState)\n      if (prevPosMap.has(mesh)) {\n        prevPosMap.get(mesh).lastUsedFrame = thisFrameId\n      }\n    })\n\n    prevPosMap.forEach((data, mesh) => {\n      if (data.lastUsedFrame !== thisFrameId) {\n        data.geometryMaterial.dispose()\n        data.velocityMaterial.dispose()\n        if (data.boneTexture) {\n          data.boneTexture.dispose()\n        }\n        prevPosMap.delete(mesh)\n      }\n    })\n  }\n\n  _drawMesh(renderer, mesh, type, saveState) {\n    const overrides = mesh.motionBlur || _defaultOverrides\n    let blurTransparent = this.blurTransparent\n    let renderCameraBlur = this.renderCameraBlur\n    let expandGeometry = this.expandGeometry\n    let interpolateGeometry = this.interpolateGeometry\n    let smearIntensity = this.smearIntensity\n\n    blurTransparent =\n      'blurTransparent' in overrides ? overrides.blurTransparent : this.blurTransparent\n    renderCameraBlur =\n      'renderCameraBlur' in overrides ? overrides.renderCameraBlur : this.renderCameraBlur\n    expandGeometry = 'expandGeometry' in overrides ? overrides.expandGeometry : this.expandGeometry\n    interpolateGeometry =\n      'interpolateGeometry' in overrides ? overrides.interpolateGeometry : this.interpolateGeometry\n    smearIntensity = 'smearIntensity' in overrides ? overrides.smearIntensity : this.smearIntensity\n\n    const isTransparent = mesh.material.transparent || mesh.material.alpha < 1\n    const isCulled = mesh.frustumCulled && !this._frustum.intersectsObject(mesh)\n    const skip = (blurTransparent === false && isTransparent) || isCulled\n\n    if (skip) {\n      if (this._prevPosMap.has(mesh) && saveState) {\n        this._saveCurrentObjectState(mesh)\n      }\n    } else {\n      const camera = this.camera\n      const data = this._getPreviousFrameState(mesh)\n\n      const material =\n        type === MotionBlurPass.GEOMETRY ? data.geometryMaterial : data.velocityMaterial\n      const uniforms = material.uniforms\n      uniforms.expandGeometry.value = expandGeometry\n      uniforms.interpolateGeometry.value = interpolateGeometry\n      uniforms.smearIntensity.value = smearIntensity\n\n      const projMat = renderCameraBlur ? this._prevCamProjection : camera.projectionMatrix\n      const invMat = renderCameraBlur ? this._prevCamWorldInverse : camera.matrixWorldInverse\n      uniforms.prevProjectionMatrix.value.copy(projMat)\n      uniforms.prevModelViewMatrix.value.multiplyMatrices(invMat, data.matrixWorld)\n\n      renderer.renderBufferDirect(camera, null, mesh.geometry, material, mesh, null)\n\n      if (saveState) {\n        this._saveCurrentObjectState(mesh)\n      }\n    }\n  }\n\n  _ensurePrevCameraTransform() {\n    const camera = this.camera\n    const projScreenMatrix = this._projScreenMatrix\n\n    // reinitialize the camera matrices to the current transform because if\n    // the pass has been disabled then the matrices will be out of date\n    if (this._cameraMatricesNeedInitializing) {\n      this._prevCamWorldInverse.copy(camera.matrixWorldInverse)\n      this._prevCamProjection.copy(camera.projectionMatrix)\n      this._cameraMatricesNeedInitializing = false\n    }\n\n    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse)\n    this._frustum.setFromProjectionMatrix(projScreenMatrix)\n  }\n}\n\nMotionBlurPass.DEFAULT = 0\nMotionBlurPass.VELOCITY = 1\nMotionBlurPass.GEOMETRY = 2\n\nMotionBlurPass.REGULAR_JITTER = 0\nMotionBlurPass.RANDOM_JITTER = 1\n// MotionBlurPass.BLUENOISE_JITTER = 2\n","export function traverseVisibleMeshes(obj, callback) {\n  if (obj.visible) {\n    if (obj.isMesh || obj.isSkinnedMesh) {\n      callback(obj)\n    }\n\n    const children = obj.children\n    for (let i = 0, l = children.length; i < l; i++) {\n      traverseVisibleMeshes(children[i], callback)\n    }\n  }\n}\n","import * as THREE from 'three'\nimport State from 'controls-state'\nimport { ShaderPass } from 'postprocessing'\nimport WebGLApp from './lib/WebGLApp'\nimport assets from './lib/AssetManager'\nimport Suzanne, { addScreenshotButton } from './scene/Suzanne'\nimport { addNaturalLight } from './scene/lights'\nimport passVert from './scene/shaders/pass.vert'\nimport vignetteFrag from './scene/shaders/vignette.frag'\nimport { MotionBlurPass } from './lib/MotionBlurPass/MotionBlurPass'\n\nwindow.DEBUG = window.location.search.includes('debug')\n\n// grab our canvas\nconst canvas = document.querySelector('#app')\n\n// setup the WebGLRenderer\nconst webgl = new WebGLApp({\n  canvas,\n  // enable transparency\n  alpha: true,\n  // set the scene background color\n  background: '#111',\n  backgroundAlpha: 1,\n  // enable postprocessing\n  postprocessing: true,\n  // clamping the pixel ratio gives us better performance for\n  // heavy postprocessing effects, such as motion blur\n  maxPixelRatio: 1,\n  // show the fps counter from stats.js\n  showFps: window.DEBUG,\n  // enable OrbitControls\n  orbitControls: window.DEBUG,\n  // Add the controls-gui inputs\n  controls: {\n    angularVelocity: State.Slider(0.1, {\n      label: 'Angular Velocity',\n      min: 0.01,\n      max: 30,\n      step: 0.01,\n      mapping: (x) => Math.pow(10, x),\n      inverseMapping: Math.log10,\n    }),\n  },\n  hideControls: !window.DEBUG,\n  // enable Cannon.js\n  // world: new CANNON.World(),\n})\n\n// attach it to the window to inspect in the console\nif (window.DEBUG) {\n  window.webgl = webgl\n}\n\n// hide canvas\nwebgl.canvas.style.visibility = 'hidden'\n\n// load any queued assets\nassets.load({ renderer: webgl.renderer }).then(() => {\n  // show canvas\n  webgl.canvas.style.visibility = ''\n\n  // add any \"WebGL components\" here...\n  // append them to the scene so you can\n  // use them from other components easily\n  webgl.scene.suzanne = new Suzanne(webgl)\n  webgl.scene.add(webgl.scene.suzanne)\n\n  // lights and other scene related stuff\n  addNaturalLight(webgl)\n\n  // postprocessing\n  // add an existing pass\n  const motionBlurPass = new MotionBlurPass(webgl.scene, webgl.camera, {\n    expandGeometry: 0.2,\n    smearIntensity: 0.5,\n  })\n  webgl.composer.addPass(motionBlurPass)\n\n  // add a custom pass with custom shaders.\n  // VignetteEffect exists in postprocessing,\n  // this is just to show a pass with custom shaders\n  const vignette = new ShaderPass(\n    new THREE.ShaderMaterial({\n      vertexShader: passVert,\n      fragmentShader: vignetteFrag,\n      uniforms: {\n        tDiffuse: { type: 't', value: null },\n        radius: { type: 't', value: 0.6 },\n        smoothness: { type: 't', value: 0.5 },\n      },\n    }),\n    'tDiffuse' // the input texture name\n  )\n  webgl.composer.addPass(vignette)\n\n  // add the save screenshot button\n  if (window.DEBUG) {\n    addScreenshotButton(webgl)\n  }\n\n  // start animation loop\n  webgl.start()\n})\n","import * as THREE from 'three'\n\n// natural hemisphere light from\n// https://threejs.org/examples/#webgl_lights_hemisphere\nexport function addNaturalLight(webgl) {\n  const hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.6)\n  hemiLight.color.setHSL(0.6, 1, 0.6)\n  hemiLight.groundColor.setHSL(0.095, 1, 0.75)\n  hemiLight.position.set(0, 50, 0)\n  webgl.scene.add(hemiLight)\n\n  const dirLight = new THREE.DirectionalLight(0xffffff, 1)\n  dirLight.color.setHSL(0.1, 1, 0.95)\n  dirLight.position.set(3, 5, 1)\n  dirLight.position.multiplyScalar(50)\n  webgl.scene.add(dirLight)\n}\n","export default \"#define GLSLIFY 1\\nfloat vignette(vec2 uv, float radius, float smoothness) {\\n\\tfloat diff = radius - distance(uv, vec2(0.5, 0.5));\\n\\treturn smoothstep(-smoothness, smoothness, diff);\\n}\\n\\nuniform sampler2D tDiffuse;\\nuniform float radius;\\nuniform float smoothness;\\n\\nin vec2 vUv;\\n\\nvoid main() {\\n  vec4 texColor = texture(tDiffuse, vUv);\\n\\n  float vignetteValue = vignette(vUv, radius, smoothness);\\n  texColor.rgb *= vignetteValue;\\n\\n  gl_FragColor = texColor;\\n}\\n\";"],"sourceRoot":""}