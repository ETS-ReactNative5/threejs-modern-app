{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/lib/WebGLApp.js","webpack:///./src/lib/loadTexture.js","webpack:///./src/lib/loadEnvMap.js","webpack:///./src/lib/AssetManager.js","webpack:///./src/lib/monkeyPatch.js","webpack:///./src/scene/Suzanne.js","webpack:///./src/lib/MotionBlurPass/MotionBlurShaderChunks.js","webpack:///./src/lib/MotionBlurPass/VelocityShader.js","webpack:///./src/lib/MotionBlurPass/GeometryShader.js","webpack:///./src/lib/MotionBlurPass/CompositeShader.js","webpack:///./src/lib/MotionBlurPass/MotionBlurPass.js","webpack:///./src/lib/MotionBlurPass/utils.js","webpack:///./src/index.js","webpack:///./src/scene/lights.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","WebGLApp","background","backgroundAlpha","fov","frustumSize","near","far","options","isRunning","time","dt","performance","now","resize","width","height","pixelRatio","renderer","getPixelRatio","setPixelRatio","setSize","camera","isPerspectiveCamera","aspect","left","right","top","bottom","updateProjectionMatrix","composer","scene","traverse","obj","draw","saveScreenshot","fileName","dataURI","canvas","toDataURL","saveDataURI","update","xrframe","orbitControls","isTransformControls","world","step","cannonDebugger","bodies","forEach","body","fn","render","start","setAnimationLoop","animate","stop","stats","begin","Math","min","maxDeltaTime","end","this","THREE","antialias","postprocessing","alpha","preserveDrawingBuffer","failIfMajorPerformanceCaveat","undefined","sortObjects","gamma","outputEncoding","xr","enabled","domElement","setClearColor","maxPixelRatio","orthographic","position","copy","cameraPosition","lookAt","gl","getContext","addEventListener","isDragging","event","isPrimary","offsetX","offsetY","child","onPointerDown","x","y","dragX","dragY","onPointerMove","onPointerUp","maxMultisampling","getParameter","MAX_SAMPLES","EffectComposer","multisampling","frameBufferType","addPass","RenderPass","OrbitControls","enableDamping","dampingFactor","enablePan","keys","showWorldWireframes","autoUpdate","showFps","Stats","showPanel","document","appendChild","dom","controls","controlsState","State","hideControls","wrapGUI","expanded","closeControls","styles","style","createElement","type","innerHTML","head","loadGPUTier","getGPUTier","glContext","then","gpuTier","gpu","tier","isMobile","fps","index","indexOf","innerWidth","innerHeight","devicePixelRatio","cursor","blob","dataURIToBlob","link","download","href","URL","createObjectURL","onclick","setTimeout","revokeObjectURL","removeAttribute","click","loadTexture","url","texture","encoding","setTextureParams","loadImage","crossorigin","image","needsUpdate","initTexture","Error","opt","flipY","mapping","format","isJPEG","search","repeat","wrapS","wrapT","minFilter","magFilter","generateMipmaps","equirectangular","pmrem","pmremEquirectangular","size","highestPowerOfTwo","naturalHeight","renderTarget","outTexture","fromEquirectangularTexture","dispose","basePath","extension","urls","generateCubeUrls","replace","Promise","resolve","reject","HDRCubeTextureLoader","load","cubeMap","assignCubemapOptions","pmremGenerator","compileCubemapShader","fromCubemap","pmremCubemap","compileEquirectangularShader","cubeRenderTarget","fromEquirectangular","prefix","postfix","TypeError","_getQueued","_extractType","find","item","ext","lastIndexOf","test","itemLoadingStart","Date","_loadItem","DEBUG","console","log","prettyMs","error","queue","total","loadingStart","pMap","logError","percent","concurrency","errors","filter","groupLog","GLTFLoader","err","fetch","response","json","loadEnvMap","arrayBuffer","text","groupCollapsed","groupEnd","monkeyPatch","shader","defines","main","replaces","patchedShader","str","rep","split","join","stringDefines","map","suzanneKey","assets","albedoKey","metalnessKey","roughnessKey","normalKey","hdrKey","Suzanne","webgl","suzanneGltf","suzanne","clone","envMap","material","metalnessMap","roughnessMap","normalMap","normalScale","roughness","metalness","onBeforeCompile","uniforms","frequency","movement","amplitude","vertexShader","$onChanges","isMesh","scale","multiplyScalar","add","coords","set","raycaster","setFromCamera","hits","intersectObject","speed","prev_skinning_pars_vertex","velocity_vertex","ShaderChunk","skinbase_vertex","beginnormal_vertex","skinnormal_vertex","defaultnormal_vertex","skinning_vertex","VelocityShader","prevProjectionMatrix","Matrix4","prevModelViewMatrix","prevBoneTexture","expandGeometry","interpolateGeometry","smearIntensity","skinning_pars_vertex","fragmentShader","GeometryShader","CompositeShader","SAMPLES","JITTER_STRATEGY","BLUENOISE_SIZE","sourceBuffer","velocityBuffer","jitter","blueNoiseTex","_blackColor","Color","_defaultOverrides","MotionBlurPass","samples","blurTransparent","renderCameraBlur","renderTargetScale","jitterStrategy","RANDOM_JITTER","debug","display","DEFAULT","dontUpdateState","_prevPosMap","Map","_currentFrameMod","_frustum","Frustum","_projScreenMatrix","_cameraMatricesNeedInitializing","_prevCamProjection","_prevCamWorldInverse","_velocityBuffer","WebGLRenderTarget","LinearFilter","HalfFloatType","_compositeMaterial","ShaderMaterial","_compositeQuad","ThreePass","FullScreenQuad","_enabled","val","clear","UnsignedByteType","RGBFormat","readBuffer","writeBuffer","compositeQuad","finalBuffer","renderToScreen","autoClear","compile","_ensurePrevCameraTransform","GEOMETRY","setRenderTarget","_drawAllMeshes","VELOCITY","compositeMaterial","max","floor","matrixWorldInverse","projectionMatrix","prevPosMap","lastUsedFrame","matrixWorld","geometryMaterial","velocityMaterial","boneMatrices","boneTexture","isSkinned","skeleton","bones","skinning","boneTextureNeedsUpdate","Float32Array","sqrt","DataTexture","RGBAFormat","FloatType","saveState","thisFrameId","traverseVisibleMeshes","callback","visible","isSkinnedMesh","children","mesh","_drawMesh","has","delete","overrides","motionBlur","isTransparent","transparent","isCulled","frustumCulled","intersectsObject","_saveCurrentObjectState","_getPreviousFrameState","projMat","invMat","multiplyMatrices","renderBufferDirect","geometry","projScreenMatrix","setFromProjectionMatrix","Pass","REGULAR_JITTER","location","includes","querySelector","Slider","pow","inverseMapping","log10","visibility","hemiLight","color","setHSL","groundColor","dirLight","addNaturalLight","screenshotButton","motionBlurPass","EffectPass","VignetteEffect","padding","fontSize","textContent"],"mappings":"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","file":"app.349fa498.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([231,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport dataURIToBlob from 'datauritoblob'\nimport Stats from 'stats.js'\nimport State from 'controls-state'\nimport wrapGUI from 'controls-gui'\nimport { getGPUTier } from 'detect-gpu'\nimport { EffectComposer, RenderPass } from 'postprocessing'\nimport cannonDebugger from 'cannon-es-debugger'\n\nexport default class WebGLApp {\n  #width\n  #height\n  isRunning = false\n  time = 0\n  dt = 0\n  #lastTime = performance.now()\n  #updateListeners = []\n  #pointerdownListeners = []\n  #pointermoveListeners = []\n  #pointerupListeners = []\n  #startX\n  #startY\n\n  constructor({\n    background = '#111',\n    backgroundAlpha = 1,\n    fov = 45,\n    frustumSize = 3,\n    near = 0.01,\n    far = 100,\n    ...options\n  } = {}) {\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: !options.postprocessing,\n      alpha: false,\n      // enabled for saving screenshots of the canvas,\n      // may wish to disable this for perf reasons\n      preserveDrawingBuffer: true,\n      failIfMajorPerformanceCaveat: true,\n      ...options,\n    })\n    if (options.sortObjects !== undefined) {\n      this.renderer.sortObjects = options.sortObjects\n    }\n    if (options.gamma) {\n      this.renderer.outputEncoding = THREE.sRGBEncoding\n    }\n    if (options.xr) {\n      this.renderer.xr.enabled = true\n    }\n\n    this.canvas = this.renderer.domElement\n\n    this.renderer.setClearColor(background, backgroundAlpha)\n\n    // save the fixed dimensions\n    this.#width = options.width\n    this.#height = options.height\n\n    // clamp pixel ratio for performance\n    this.maxPixelRatio = options.maxPixelRatio || 2\n    // clamp delta to stepping anything too far forward\n    this.maxDeltaTime = options.maxDeltaTime || 1 / 30\n\n    // setup the camera\n    const aspect = this.#width / this.#height\n    if (!options.orthographic) {\n      this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far)\n    } else {\n      this.camera = new THREE.OrthographicCamera(\n        -(frustumSize * aspect) / 2,\n        (frustumSize * aspect) / 2,\n        frustumSize / 2,\n        -frustumSize / 2,\n        near,\n        far\n      )\n      this.camera.frustumSize = frustumSize\n    }\n    this.camera.position.copy(options.cameraPosition || new THREE.Vector3(0, 0, 4))\n    this.camera.lookAt(0, 0, 0)\n\n    this.scene = new THREE.Scene()\n\n    this.gl = this.renderer.getContext()\n\n    // handle resize events\n    window.addEventListener('resize', this.resize)\n    window.addEventListener('orientationchange', this.resize)\n\n    // force an initial resize event\n    this.resize()\n\n    // __________________________ADDONS__________________________\n\n    // really basic pointer events handler, the second argument\n    // contains the x and y relative to the top left corner\n    // of the canvas.\n    // In case of touches with multiple fingers, only the\n    // first touch is registered.\n    this.isDragging = false\n    this.canvas.addEventListener('pointerdown', (event) => {\n      if (!event.isPrimary) return\n      this.isDragging = true\n      this.#startX = event.offsetX\n      this.#startY = event.offsetY\n      // call onPointerDown method\n      this.scene.traverse((child) => {\n        if (typeof child.onPointerDown === 'function') {\n          child.onPointerDown(event, { x: event.offsetX, y: event.offsetY })\n        }\n      })\n      // call the pointerdown listeners\n      this.#pointerdownListeners.forEach((fn) => fn(event, { x: event.offsetX, y: event.offsetY }))\n    })\n    this.canvas.addEventListener('pointermove', (event) => {\n      if (!event.isPrimary) return\n      // call onPointerMove method\n      const position = {\n        x: event.offsetX,\n        y: event.offsetY,\n        ...(this.#startX !== undefined && { dragX: event.offsetX - this.#startX }),\n        ...(this.#startY !== undefined && { dragY: event.offsetY - this.#startY }),\n      }\n      this.scene.traverse((child) => {\n        if (typeof child.onPointerMove === 'function') {\n          child.onPointerMove(event, position)\n        }\n      })\n      // call the pointermove listeners\n      this.#pointermoveListeners.forEach((fn) => fn(event, position))\n    })\n    this.canvas.addEventListener('pointerup', (event) => {\n      if (!event.isPrimary) return\n      this.isDragging = false\n      // call onPointerUp method\n      const position = {\n        x: event.offsetX,\n        y: event.offsetY,\n        ...(this.#startX !== undefined && { dragX: event.offsetX - this.#startX }),\n        ...(this.#startY !== undefined && { dragY: event.offsetY - this.#startY }),\n      }\n      this.scene.traverse((child) => {\n        if (typeof child.onPointerUp === 'function') {\n          child.onPointerUp(event, position)\n        }\n      })\n      // call the pointerup listeners\n      this.#pointerupListeners.forEach((fn) => fn(event, position))\n\n      this.#startX = undefined\n      this.#startY = undefined\n    })\n\n    // expose a composer for postprocessing passes\n    if (options.postprocessing) {\n      const maxMultisampling = this.gl.getParameter(this.gl.MAX_SAMPLES)\n      this.composer = new EffectComposer(this.renderer, {\n        multisampling: Math.min(8, maxMultisampling),\n        frameBufferType: options.gamma ? THREE.HalfFloatType : undefined,\n        ...options,\n      })\n      this.composer.addPass(new RenderPass(this.scene, this.camera))\n    }\n\n    // set up OrbitControls\n    if (options.orbitControls) {\n      this.orbitControls = new OrbitControls(this.camera, this.canvas)\n\n      this.orbitControls.enableDamping = true\n      this.orbitControls.dampingFactor = 0.15\n      this.orbitControls.enablePan = false\n\n      if (options.orbitControls instanceof Object) {\n        Object.keys(options.orbitControls).forEach((key) => {\n          this.orbitControls[key] = options.orbitControls[key]\n        })\n      }\n    }\n\n    // Attach the Cannon physics engine\n    if (options.world) {\n      this.world = options.world\n      if (options.showWorldWireframes) {\n        this.cannonDebugger = cannonDebugger(this.scene, this.world.bodies, { autoUpdate: false })\n      }\n    }\n\n    // show the fps meter\n    if (options.showFps) {\n      this.stats = new Stats()\n      this.stats.showPanel(0)\n      document.body.appendChild(this.stats.dom)\n    }\n\n    // initialize the controls-state\n    if (options.controls) {\n      const controlsState = State(options.controls)\n      this.controls = options.hideControls\n        ? controlsState\n        : wrapGUI(controlsState, { expanded: !options.closeControls })\n\n      // add the custom controls-gui styles\n      if (!options.hideControls) {\n        const styles = `\n          [class^=\"controlPanel-\"] [class*=\"__field\"]::before {\n            content: initial !important;\n          }\n          [class^=\"controlPanel-\"] [class*=\"__labelText\"] {\n            text-indent: 6px !important;\n          }\n          [class^=\"controlPanel-\"] [class*=\"__field--button\"] > button::before {\n            content: initial !important;\n          }\n        `\n        const style = document.createElement('style')\n        style.type = 'text/css'\n        style.innerHTML = styles\n        document.head.appendChild(style)\n      }\n    }\n\n    // detect the gpu info\n    this.loadGPUTier = getGPUTier({ glContext: this.gl }).then((gpuTier) => {\n      this.gpu = {\n        name: gpuTier.gpu,\n        tier: gpuTier.tier,\n        isMobile: gpuTier.isMobile,\n        fps: gpuTier.fps,\n      }\n    })\n  }\n\n  get width() {\n    return this.#width || window.innerWidth\n  }\n\n  get height() {\n    return this.#height || window.innerHeight\n  }\n\n  get pixelRatio() {\n    return Math.min(this.maxPixelRatio, window.devicePixelRatio)\n  }\n\n  resize = ({ width = this.width, height = this.height, pixelRatio = this.pixelRatio } = {}) => {\n    // update pixel ratio if necessary\n    if (this.renderer.getPixelRatio() !== pixelRatio) {\n      this.renderer.setPixelRatio(pixelRatio)\n    }\n\n    // setup new size & update camera aspect if necessary\n    this.renderer.setSize(width, height)\n    if (this.camera.isPerspectiveCamera) {\n      this.camera.aspect = width / height\n    } else {\n      const aspect = width / height\n      this.camera.left = -(this.camera.frustumSize * aspect) / 2\n      this.camera.right = (this.camera.frustumSize * aspect) / 2\n      this.camera.top = this.camera.frustumSize / 2\n      this.camera.bottom = -this.camera.frustumSize / 2\n    }\n    this.camera.updateProjectionMatrix()\n\n    // resize also the composer, width and height\n    // are automatically extracted from the renderer\n    if (this.composer) {\n      this.composer.setSize()\n    }\n\n    // recursively tell all child objects to resize\n    this.scene.traverse((obj) => {\n      if (typeof obj.resize === 'function') {\n        obj.resize({\n          width,\n          height,\n          pixelRatio,\n        })\n      }\n    })\n\n    // draw a frame to ensure the new size has been registered visually\n    this.draw()\n    return this\n  }\n\n  // convenience function to trigger a PNG download of the canvas\n  saveScreenshot = ({ width = 2560, height = 1440, fileName = 'Screenshot.png' } = {}) => {\n    // force a specific output size\n    this.resize({ width, height, pixelRatio: 1 })\n    this.draw()\n\n    const dataURI = this.canvas.toDataURL('image/png')\n\n    // reset to default size\n    this.resize()\n    this.draw()\n\n    // save\n    saveDataURI(fileName, dataURI)\n  }\n\n  update = (dt, time, xrframe) => {\n    if (this.orbitControls) {\n      this.orbitControls.update()\n    }\n\n    // recursively tell all child objects to update\n    this.scene.traverse((obj) => {\n      if (typeof obj.update === 'function' && !obj.isTransformControls) {\n        obj.update(dt, time, xrframe)\n      }\n    })\n\n    if (this.world) {\n      // update the cannon-es physics engine\n      this.world.step(1 / 60, dt)\n\n      // update the debug wireframe renderer\n      if (this.cannonDebugger) {\n        this.cannonDebugger.update()\n      }\n\n      // recursively tell all child bodies to update\n      this.world.bodies.forEach((body) => {\n        if (typeof body.update === 'function') {\n          body.update(dt, time)\n        }\n      })\n    }\n\n    // call the update listeners\n    this.#updateListeners.forEach((fn) => fn(dt, time, xrframe))\n\n    return this\n  }\n\n  onUpdate(fn) {\n    this.#updateListeners.push(fn)\n  }\n\n  onPointerDown(fn) {\n    this.#pointerdownListeners.push(fn)\n  }\n\n  onPointerMove(fn) {\n    this.#pointermoveListeners.push(fn)\n  }\n\n  onPointerUp(fn) {\n    this.#pointerupListeners.push(fn)\n  }\n\n  offUpdate(fn) {\n    const index = this.#updateListeners.indexOf(fn)\n\n    // return silently if the function can't be found\n    if (index === -1) {\n      return\n    }\n\n    this.#updateListeners.splice(index, 1)\n  }\n\n  offPointerDown(fn) {\n    const index = this.#pointerdownListeners.indexOf(fn)\n\n    // return silently if the function can't be found\n    if (index === -1) {\n      return\n    }\n\n    this.#pointerdownListeners.splice(index, 1)\n  }\n\n  offPointerMove(fn) {\n    const index = this.#pointermoveListeners.indexOf(fn)\n\n    // return silently if the function can't be found\n    if (index === -1) {\n      return\n    }\n\n    this.#pointermoveListeners.splice(index, 1)\n  }\n\n  offPointerUp(fn) {\n    const index = this.#pointerupListeners.indexOf(fn)\n\n    // return silently if the function can't be found\n    if (index === -1) {\n      return\n    }\n\n    this.#pointerupListeners.splice(index, 1)\n  }\n\n  draw = () => {\n    if (this.composer) {\n      this.composer.render(this.dt)\n    } else {\n      this.renderer.render(this.scene, this.camera)\n    }\n    return this\n  }\n\n  start = () => {\n    if (this.isRunning) return\n    this.renderer.setAnimationLoop(this.animate)\n    this.isRunning = true\n    return this\n  }\n\n  stop = () => {\n    if (!this.isRunning) return\n    this.renderer.setAnimationLoop(null)\n    this.isRunning = false\n    return this\n  }\n\n  animate = (now, xrframe) => {\n    if (!this.isRunning) return\n\n    if (this.stats) this.stats.begin()\n\n    this.dt = Math.min(this.maxDeltaTime, (now - this.#lastTime) / 1000)\n    this.time += this.dt\n    this.#lastTime = now\n    this.update(this.dt, this.time, xrframe)\n    this.draw()\n\n    if (this.stats) this.stats.end()\n  }\n\n  get cursor() {\n    return this.canvas.style.cursor\n  }\n\n  set cursor(cursor) {\n    if (cursor) {\n      this.canvas.style.cursor = cursor\n    } else {\n      this.canvas.style.cursor = null\n    }\n  }\n}\n\nfunction saveDataURI(name, dataURI) {\n  const blob = dataURIToBlob(dataURI)\n\n  // force download\n  const link = document.createElement('a')\n  link.download = name\n  link.href = window.URL.createObjectURL(blob)\n  link.onclick = setTimeout(() => {\n    window.URL.revokeObjectURL(blob)\n    link.removeAttribute('href')\n  }, 0)\n\n  link.click()\n}\n","import * as THREE from 'three'\nimport loadImage from 'image-promise'\n\n// TODO maybe add the textureLoader?\nexport default async function loadTexture(url, options) {\n  const texture = new THREE.Texture()\n  texture.name = url\n  texture.encoding = options.encoding || THREE.LinearEncoding\n  setTextureParams(url, texture, options)\n\n  try {\n    const image = await loadImage(url, { crossorigin: 'anonymous' })\n\n    texture.image = image\n    texture.needsUpdate = true\n    if (options.renderer) {\n      // Force texture to be uploaded to GPU immediately,\n      // this will avoid \"jank\" on first rendered frame\n      options.renderer.initTexture(texture)\n    }\n    return texture\n  } catch (err) {\n    throw new Error(`Could not load texture ${url}`)\n  }\n}\n\nfunction setTextureParams(url, texture, opt) {\n  if (typeof opt.flipY === 'boolean') texture.flipY = opt.flipY\n  if (typeof opt.mapping !== 'undefined') {\n    texture.mapping = opt.mapping\n  }\n  if (typeof opt.format !== 'undefined') {\n    texture.format = opt.format\n  } else {\n    // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n    const isJPEG = url.search(/\\.(jpg|jpeg)$/) > 0 || url.search(/^data:image\\/jpeg/) === 0\n    texture.format = isJPEG ? THREE.RGBFormat : THREE.RGBAFormat\n  }\n  if (opt.repeat) texture.repeat.copy(opt.repeat)\n  texture.wrapS = opt.wrapS || THREE.ClampToEdgeWrapping\n  texture.wrapT = opt.wrapT || THREE.ClampToEdgeWrapping\n  texture.minFilter = opt.minFilter || THREE.LinearMipMapLinearFilter\n  texture.magFilter = opt.magFilter || THREE.LinearFilter\n  texture.generateMipmaps = opt.generateMipmaps !== false\n}\n","import * as THREE from 'three'\nimport highestPowerOfTwo from 'highest-power-two'\nimport { HDRCubeTextureLoader } from 'three/examples/jsm/loaders/HDRCubeTextureLoader'\nimport loadTexture from './loadTexture'\n\nexport default async function loadEnvMap(url, options) {\n  const renderer = options.renderer\n\n  if (!renderer) {\n    throw new Error(`Env map requires renderer to passed in the options for ${url}!`)\n  }\n\n  if (options.equirectangular) {\n    const texture = await loadTexture(url, { renderer })\n\n    if (options.pmrem) {\n      return pmremEquirectangular(texture, renderer)\n    } else {\n      const size = highestPowerOfTwo(texture.image.naturalHeight)\n      const renderTarget = new THREE.WebGLCubeRenderTarget(size, {\n        generateMipmaps: true,\n        minFilter: THREE.LinearMipmapLinearFilter,\n        magFilter: THREE.LinearFilter,\n      })\n\n      const outTexture = renderTarget.fromEquirectangularTexture(renderer, texture).texture\n\n      texture.dispose() // dispose original texture\n      texture.image.data = null // remove image reference\n\n      return outTexture\n    }\n  }\n\n  const basePath = url\n  const extension = options.extension || '.jpg'\n  const urls = generateCubeUrls(`${basePath.replace(/\\/$/, '')}/`, extension)\n\n  if (extension === '.hdr') {\n    // load a float HDR texture\n    return new Promise((resolve, reject) => {\n      new HDRCubeTextureLoader().load(\n        THREE.UnsignedByteType,\n        urls,\n        (cubeMap) => resolve(assignCubemapOptions(cubeMap, options)),\n        null,\n        () => reject(new Error(`Could not load env map: ${basePath}`))\n      )\n    })\n  }\n\n  // load a RGBM encoded texture\n  return new Promise((resolve, reject) => {\n    new THREE.CubeTextureLoader().load(\n      urls,\n      (cubeMap) => resolve(assignCubemapOptions(cubeMap, options)),\n      null,\n      () => reject(new Error(`Could not load env map: ${basePath}`))\n    )\n  })\n}\n\nfunction assignCubemapOptions(cubeMap, options) {\n  if (options.encoding) {\n    cubeMap.encoding = options.encoding\n  }\n  if (options.format) {\n    cubeMap.format = options.format\n  }\n  if (options.pmrem) {\n    cubeMap = pmremCubemap(cubeMap, options.renderer)\n  }\n  return cubeMap\n}\n\n// prefilter the environment map for irradiance\nfunction pmremEquirectangular(texture, renderer) {\n  const pmremGenerator = new THREE.PMREMGenerator(renderer)\n  pmremGenerator.compileEquirectangularShader()\n\n  const cubeRenderTarget = pmremGenerator.fromEquirectangular(texture)\n\n  pmremGenerator.dispose() // dispose PMREMGenerator\n  texture.dispose() // dispose original texture\n  texture.image.data = null // remove image reference\n\n  return cubeRenderTarget.texture\n}\n\n// prefilter the environment map for irradiance\nfunction pmremCubemap(cubeMap, renderer) {\n  const pmremGenerator = new THREE.PMREMGenerator(renderer)\n  pmremGenerator.compileCubemapShader()\n  const renderTarget = pmremGenerator.fromCubemap(cubeMap)\n\n  pmremGenerator.dispose() // dispose PMREMGenerator\n  cubeMap.dispose() // dispose original texture\n  cubeMap.image.data = null // remove image reference\n\n  return renderTarget.texture\n}\n\nfunction generateCubeUrls(prefix, postfix) {\n  return [\n    `${prefix}px${postfix}`,\n    `${prefix}nx${postfix}`,\n    `${prefix}py${postfix}`,\n    `${prefix}ny${postfix}`,\n    `${prefix}pz${postfix}`,\n    `${prefix}nz${postfix}`,\n  ]\n}\n","import pMap from 'p-map'\nimport prettyMs from 'pretty-ms'\nimport loadImage from 'image-promise'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport loadTexture from './loadTexture'\nimport loadEnvMap from './loadEnvMap'\n\nclass AssetManager {\n  #queue = []\n  #cache = {}\n  #onProgressListeners = []\n  #asyncConcurrency = 10\n  #logs = []\n\n  addProgressListener(fn) {\n    if (typeof fn !== 'function') {\n      throw new TypeError('onProgress must be a function')\n    }\n    this.#onProgressListeners.push(fn)\n  }\n\n  // Add an asset to be queued, input: { url, type, ...options }\n  queue({ url, type, ...options }) {\n    if (!url) throw new TypeError('Must specify a URL or opt.url for AssetManager.queue()')\n    if (!this._getQueued(url)) {\n      this.#queue.push({ url, type: type || this._extractType(url), ...options })\n    }\n\n    return url\n  }\n\n  _getQueued(url) {\n    return this.#queue.find((item) => item.url === url)\n  }\n\n  _extractType(url) {\n    const ext = url.slice(url.lastIndexOf('.'))\n\n    switch (true) {\n      case /\\.(gltf|glb)$/i.test(ext):\n        return 'gltf'\n      case /\\.json$/i.test(ext):\n        return 'json'\n      case /\\.svg$/i.test(ext):\n        return 'svg'\n      case /\\.(jpe?g|png|gif|bmp|tga|tif)$/i.test(ext):\n        return 'image'\n      case /\\.(wav|mp3)$/i.test(ext):\n        return 'audio'\n      case /\\.(mp4|webm|ogg|ogv)$/i.test(ext):\n        return 'video'\n      default:\n        throw new Error(`Could not load ${url}, unknown file extension!`)\n    }\n  }\n\n  // Fetch a loaded asset by URL\n  get = (url) => {\n    if (!url) throw new TypeError('Must specify an URL for AssetManager.get()')\n\n    return this.#cache[url]\n  }\n\n  // Loads a single asset\n  async loadSingle({ renderer, ...item }) {\n    // renderer is used to load textures and env maps,\n    // but require it always since it is an extensible pattern\n    if (!renderer) {\n      throw new Error('You must provide a renderer to the loadSingle function.')\n    }\n\n    try {\n      const itemLoadingStart = Date.now()\n\n      this.#cache[item.url] = await this._loadItem({ renderer, ...item })\n\n      if (window.DEBUG) {\n        console.log(\n          `📦 Loaded single asset %c${item.url}%c in ${prettyMs(Date.now() - itemLoadingStart)}`,\n          'color:blue',\n          'color:black'\n        )\n      }\n\n      return item.url\n    } catch (err) {\n      delete this.#cache[item.url]\n      console.error(`📦 Asset ${item.url} was not loaded:\\n${err}`)\n    }\n  }\n\n  // Loads all queued assets\n  async load({ renderer }) {\n    // renderer is used to load textures and env maps,\n    // but require it always since it is an extensible pattern\n    if (!renderer) {\n      throw new Error('You must provide a renderer to the load function.')\n    }\n\n    const queue = this.#queue.slice()\n    this.#queue.length = 0 // clear queue\n\n    const total = queue.length\n    if (total === 0) {\n      // resolve first this functions and then call the progress listeners\n      setTimeout(() => this.#onProgressListeners.forEach((fn) => fn(1)), 0)\n      return\n    }\n\n    const loadingStart = Date.now()\n\n    await pMap(\n      queue,\n      async (item, i) => {\n        try {\n          const itemLoadingStart = Date.now()\n\n          this.#cache[item.url] = await this._loadItem({ renderer, ...item })\n\n          if (window.DEBUG) {\n            this.log(\n              `Loaded %c${item.url}%c in ${prettyMs(Date.now() - itemLoadingStart)}`,\n              'color:blue',\n              'color:black'\n            )\n          }\n        } catch (err) {\n          this.logError(`Asset ${item.url} was not loaded:\\n${err}`)\n        }\n\n        const percent = (i + 1) / total\n        this.#onProgressListeners.forEach((fn) => fn(percent))\n      },\n      { concurrency: this.#asyncConcurrency }\n    )\n\n    if (window.DEBUG) {\n      const errors = this.#logs.filter((log) => log.type === 'error')\n\n      if (errors.length === 0) {\n        this.groupLog(`📦 Assets loaded in ${prettyMs(Date.now() - loadingStart)} ⏱`)\n      } else {\n        this.groupLog(\n          `📦 %c Could not load ${errors.length} asset${errors.length > 1 ? 's' : ''} `,\n          'color:white;background:red;'\n        )\n      }\n    }\n  }\n\n  // Loads a single asset on demand, returning from\n  // cache if it exists otherwise adding it to the cache\n  // after loading.\n  _loadItem({ url, type, renderer, ...options }) {\n    if (url in this.#cache) {\n      return this.#cache[url]\n    }\n\n    switch (type) {\n      case 'gltf':\n        return new Promise((resolve, reject) => {\n          new GLTFLoader().load(url, resolve, null, (err) =>\n            reject(new Error(`Could not load GLTF asset ${url}:\\n${err}`))\n          )\n        })\n      case 'json':\n        return fetch(url).then((response) => response.json())\n      case 'env-map':\n        return loadEnvMap(url, { renderer, ...options })\n      case 'svg':\n      case 'image':\n        return loadImage(url, { crossorigin: 'anonymous' })\n      case 'texture':\n        return loadTexture(url, { renderer, ...options })\n      case 'audio':\n        // You might not want to load big audio files and\n        // store them in memory, that might be inefficient.\n        // Rather load them outside of the queue\n        return fetch(url).then((response) => response.arrayBuffer())\n      case 'video':\n        // You might not want to load big video files and\n        // store them in memory, that might be inefficient.\n        // Rather load them outside of the queue\n        return fetch(url).then((response) => response.blob())\n      default:\n        throw new Error(`Could not load ${url}, the type ${type} is unknown!`)\n    }\n  }\n\n  log(...text) {\n    this.#logs.push({ type: 'log', text })\n  }\n\n  logError(...text) {\n    this.#logs.push({ type: 'error', text })\n  }\n\n  groupLog(...text) {\n    console.groupCollapsed(...text)\n    this.#logs.forEach((log) => {\n      console[log.type](...log.text)\n    })\n    console.groupEnd()\n\n    this.#logs.length = 0 // clear logs\n  }\n}\n\n// asset manager is a singleton, you can require it from\n// different files and use the same instance.\n// A plain js object would have worked just fine,\n// fucking java patterns\nexport default new AssetManager()\n","export function monkeyPatch(shader, { defines = '', head = '', main = '', ...replaces }) {\n  let patchedShader = shader\n\n  const replaceAll = (str, find, rep) => str.split(find).join(rep)\n  Object.keys(replaces).forEach((key) => {\n    patchedShader = replaceAll(patchedShader, key, replaces[key])\n  })\n\n  patchedShader = patchedShader.replace(\n    'void main() {',\n    `\n    ${head}\n    void main() {\n      ${main}\n    `\n  )\n\n  const stringDefines = Object.keys(defines)\n    .map((d) => `#define ${d} ${defines[d]}`)\n    .join('\\n')\n\n  return `\n    ${stringDefines}\n    ${patchedShader}\n  `\n}\n","import * as THREE from 'three'\n// TODO document better glslify\nimport glsl from 'glslify'\nimport assets from '../lib/AssetManager'\nimport { monkeyPatch } from '../lib/monkeyPatch'\n\n// elaborated three.js component example\n// containing example usage of\n//   - asset manager\n//   - control panel\n//   - touch events\n//   - postprocessing\n//   - screenshot saving\n\n// preload the suzanne model\nconst suzanneKey = assets.queue({\n  url: 'assets/suzanne.gltf',\n  type: 'gltf',\n})\n\n// preload the materials\nconst albedoKey = assets.queue({\n  url: 'assets/spotty-metal/albedo.jpg',\n  type: 'texture',\n  // encoding: THREE.sRGBEncoding,\n})\nconst metalnessKey = assets.queue({\n  url: 'assets/spotty-metal/metalness.jpg',\n  type: 'texture',\n})\nconst roughnessKey = assets.queue({\n  url: 'assets/spotty-metal/roughness.jpg',\n  type: 'texture',\n})\nconst normalKey = assets.queue({\n  url: 'assets/spotty-metal/normal.jpg',\n  type: 'texture',\n})\n\n// preload the environment map\nconst hdrKey = assets.queue({\n  url: 'assets/ouside-afternoon-blurred-hdr.jpg',\n  type: 'env-map',\n  // equirectangular means it's just one image, projected\n  equirectangular: true,\n  // encoding: THREE.sRGBEncoding,\n})\n\nexport default class Suzanne extends THREE.Group {\n  constructor(webgl, options = {}) {\n    super(options)\n    this.webgl = webgl\n    this.options = options\n\n    const suzanneGltf = assets.get(suzanneKey)\n    const suzanne = suzanneGltf.scene.clone()\n\n    // TODO fix assets and gamma\n    const map = assets.get(albedoKey)\n    const envMap = assets.get(hdrKey)\n    map.encoding = THREE.sRGBEncoding\n    envMap.encoding = THREE.sRGBEncoding\n\n    const material = new THREE.MeshStandardMaterial({\n      map,\n      metalnessMap: assets.get(metalnessKey),\n      roughnessMap: assets.get(roughnessKey),\n      normalMap: assets.get(normalKey),\n      normalScale: new THREE.Vector2(2, 2),\n      envMap,\n      roughness: webgl.controls.roughness,\n      metalness: 1,\n    })\n\n    material.onBeforeCompile = (shader) => {\n      this.uniforms = shader.uniforms\n      shader.uniforms.time = { value: 0 }\n      shader.uniforms.frequency = { value: webgl.controls.movement.frequency }\n      shader.uniforms.amplitude = { value: webgl.controls.movement.amplitude }\n\n      shader.vertexShader = monkeyPatch(shader.vertexShader, {\n        head: glsl`\n          uniform float time;\n          uniform float frequency;\n          uniform float amplitude;\n\n          // you could import glsl package like this\n          // #pragma glslify: noise = require(glsl-noise/simplex/3d)\n        `,\n        main: glsl`\n          float theta = sin(position.z * frequency + time) * amplitude;\n          float c = cos(theta);\n          float s = sin(theta);\n          mat3 deformMatrix = mat3(c, 0, s, 0, 1, 0, -s, 0, c);\n        `,\n        '#include <beginnormal_vertex>': glsl`\n          vec3 objectNormal = vec3(normal) * deformMatrix;\n        `,\n        '#include <begin_vertex>': glsl`\n          vec3 transformed = vec3(position) * deformMatrix;\n        `,\n      })\n    }\n\n    webgl.controls.$onChanges((controls) => {\n      if (controls.roughness) {\n        material.roughness = controls.roughness.value\n      }\n      if (controls['movement.frequency']) {\n        this.uniforms.frequency.value = controls['movement.frequency'].value\n      }\n      if (controls['movement.amplitude']) {\n        this.uniforms.amplitude.value = controls['movement.amplitude'].value\n      }\n    })\n\n    // apply the material to the model\n    suzanne.traverse((child) => {\n      if (child.isMesh) {\n        child.material = material\n      }\n    })\n\n    // make it a little bigger\n    suzanne.scale.multiplyScalar(1.2)\n\n    this.add(suzanne)\n\n    // set the background as the hdr\n    this.webgl.scene.background = envMap\n  }\n\n  onPointerDown(event, { x, y }) {\n    // for example, check of we clicked on an\n    // object with raycasting\n    const coords = new THREE.Vector2().set(\n      (x / this.webgl.width) * 2 - 1,\n      (-y / this.webgl.height) * 2 + 1\n    )\n    const raycaster = new THREE.Raycaster()\n    raycaster.setFromCamera(coords, this.webgl.camera)\n    const hits = raycaster.intersectObject(this, true)\n    console.log(hits.length > 0 ? `Hit ${hits[0].object.name}!` : 'No hit')\n    // this, of course, doesn't take into consideration the\n    // mesh deformation in the vertex shader\n  }\n\n  onPointerMove(event, { x, y }) {}\n\n  onPointerUp(event, { x, y }) {}\n\n  update(dt, time) {\n    if (this.uniforms) this.uniforms.time.value += dt * this.webgl.controls.movement.speed\n  }\n}\n\n// demo the save screenshot feature\nexport function addScreenshotButton(webgl) {\n  const screenshotButton = document.createElement('div')\n\n  // normally the styles would be in style.css\n  screenshotButton.style.position = 'fixed'\n  screenshotButton.style.bottom = 0\n  screenshotButton.style.right = 0\n  screenshotButton.style.background = 'tomato'\n  screenshotButton.style.cursor = 'pointer'\n  screenshotButton.style.padding = '8px 16px'\n  screenshotButton.style.color = 'white'\n  screenshotButton.style.fontSize = '24px'\n\n  screenshotButton.textContent = 'Save screenshot'\n  document.body.appendChild(screenshotButton)\n  screenshotButton.addEventListener('click', webgl.saveScreenshot)\n}\n","import { ShaderChunk } from 'three'\n\n// Modified ShaderChunk.skinning_pars_vertex to handle\n// a second set of bone information from the previou frame\nexport const prev_skinning_pars_vertex = /* glsl */ `\n  #ifdef USE_SKINNING\n  #ifdef BONE_TEXTURE\n    uniform sampler2D prevBoneTexture;\n    mat4 getPrevBoneMatrix( const in float i ) {\n      float j = i * 4.0;\n      float x = mod( j, float( boneTextureSize ) );\n      float y = floor( j / float( boneTextureSize ) );\n      float dx = 1.0 / float( boneTextureSize );\n      float dy = 1.0 / float( boneTextureSize );\n      y = dy * ( y + 0.5 );\n      vec4 v1 = texture2D( prevBoneTexture, vec2( dx * ( x + 0.5 ), y ) );\n      vec4 v2 = texture2D( prevBoneTexture, vec2( dx * ( x + 1.5 ), y ) );\n      vec4 v3 = texture2D( prevBoneTexture, vec2( dx * ( x + 2.5 ), y ) );\n      vec4 v4 = texture2D( prevBoneTexture, vec2( dx * ( x + 3.5 ), y ) );\n      mat4 bone = mat4( v1, v2, v3, v4 );\n      return bone;\n    }\n  #else\n    uniform mat4 prevBoneMatrices[ MAX_BONES ];\n    mat4 getPrevBoneMatrix( const in float i ) {\n      mat4 bone = prevBoneMatrices[ int(i) ];\n      return bone;\n    }\n  #endif\n  #endif\n`\n\n// Returns the body of the vertex shader for the velocity buffer and\n// outputs the position of the current and last frame positions\nexport const velocity_vertex = /* glsl */ `\n  vec3 transformed;\n\n  // Get the normal\n  ${ShaderChunk.skinbase_vertex}\n  ${ShaderChunk.beginnormal_vertex}\n  ${ShaderChunk.skinnormal_vertex}\n  ${ShaderChunk.defaultnormal_vertex}\n\n  // Get the current vertex position\n  transformed = vec3( position );\n  ${ShaderChunk.skinning_vertex}\n  newPosition = modelViewMatrix * vec4(transformed, 1.0);\n\n  // Get the previous vertex position\n  transformed = vec3( position );\n  ${ShaderChunk.skinbase_vertex\n    .replace(/mat4 /g, '')\n    .replace(/getBoneMatrix/g, 'getPrevBoneMatrix')}\n  ${ShaderChunk.skinning_vertex.replace(/vec4 /g, '')}\n  prevPosition = prevModelViewMatrix * vec4(transformed, 1.0);\n\n  // The delta between frames\n  vec3 delta = newPosition.xyz - prevPosition.xyz;\n  vec3 direction = normalize(delta);\n\n  // Stretch along the velocity axes\n  // TODO: Can we combine the stretch and expand\n  float stretchDot = dot(direction, transformedNormal);\n  vec4 expandDir = vec4(direction, 0.0) * stretchDot * expandGeometry * length(delta);\n  vec4 newPosition2 =  projectionMatrix * (newPosition + expandDir);\n  vec4 prevPosition2 = prevProjectionMatrix * (prevPosition + expandDir);\n\n  newPosition =  projectionMatrix * newPosition;\n  prevPosition = prevProjectionMatrix * prevPosition;\n\n  gl_Position = mix(newPosition2, prevPosition2, interpolateGeometry * (1.0 - step(0.0, stretchDot) ) );\n`\n","import { Matrix4, ShaderChunk } from 'three'\nimport { prev_skinning_pars_vertex, velocity_vertex } from './MotionBlurShaderChunks'\n\nexport const VelocityShader = {\n  uniforms: {\n    prevProjectionMatrix: {\n      value: new Matrix4(),\n    },\n\n    prevModelViewMatrix: {\n      value: new Matrix4(),\n    },\n\n    prevBoneTexture: {\n      value: null,\n    },\n\n    expandGeometry: {\n      value: 0,\n    },\n\n    interpolateGeometry: {\n      value: 1,\n    },\n\n    smearIntensity: {\n      value: 1,\n    },\n  },\n\n  vertexShader: `\n    ${ShaderChunk.skinning_pars_vertex}\n    ${prev_skinning_pars_vertex}\n\n    uniform mat4 prevProjectionMatrix;\n    uniform mat4 prevModelViewMatrix;\n    uniform float expandGeometry;\n    uniform float interpolateGeometry;\n    varying vec4 prevPosition;\n    varying vec4 newPosition;\n\n    void main() {\n\n      ${velocity_vertex}\n\n    }\n  `,\n\n  fragmentShader: `\n    uniform float smearIntensity;\n    varying vec4 prevPosition;\n    varying vec4 newPosition;\n\n    void main() {\n\n      // NOTE: It seems the velociyt is incorrectly calculated here -- see the velocity pass\n      // in shader replacement to see how to compute velocities in screen uv space.\n      vec3 vel;\n      vel = (newPosition.xyz / newPosition.w) - (prevPosition.xyz / prevPosition.w);\n\n      gl_FragColor = vec4(vel * smearIntensity, 1.0);\n    }\n  `,\n}\n","import { Matrix4, ShaderChunk } from 'three'\nimport { prev_skinning_pars_vertex, velocity_vertex } from './MotionBlurShaderChunks.js'\n\nexport const GeometryShader = {\n  uniforms: {\n    prevProjectionMatrix: {\n      value: new Matrix4(),\n    },\n\n    prevModelViewMatrix: {\n      value: new Matrix4(),\n    },\n\n    prevBoneTexture: {\n      value: null,\n    },\n\n    expandGeometry: {\n      value: 0,\n    },\n\n    interpolateGeometry: {\n      value: 1,\n    },\n\n    smearIntensity: {\n      value: 1,\n    },\n  },\n\n  vertexShader: /* glsl */ `\n    ${ShaderChunk.skinning_pars_vertex}\n    ${prev_skinning_pars_vertex}\n\n    uniform mat4 prevProjectionMatrix;\n    uniform mat4 prevModelViewMatrix;\n    uniform float expandGeometry;\n    uniform float interpolateGeometry;\n    varying vec4 prevPosition;\n    varying vec4 newPosition;\n    varying vec3 color;\n\n    void main() {\n\n      ${velocity_vertex}\n\n      color = (modelViewMatrix * vec4(normal.xyz, 0)).xyz;\n      color = normalize(color);\n\n    }\n  `,\n\n  fragmentShader: /* glsl */ `\n    varying vec3 color;\n\n    void main() {\n      gl_FragColor = vec4(color, 1);\n    }\n  `,\n}\n","export const CompositeShader = {\n  defines: {\n    SAMPLES: 30,\n    JITTER_STRATEGY: 1,\n    BLUENOISE_SIZE: '32.0',\n  },\n\n  uniforms: {\n    sourceBuffer: {\n      value: null,\n    },\n\n    velocityBuffer: {\n      value: null,\n    },\n\n    jitter: {\n      value: 1,\n    },\n\n    blueNoiseTex: {\n      value: null,\n    },\n  },\n\n  vertexShader: /* glsl */ `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }\n  `,\n\n  fragmentShader: /* glsl */ `\n    varying vec2 vUv;\n    uniform sampler2D sourceBuffer;\n    uniform sampler2D velocityBuffer;\n    uniform float jitter;\n\n    #if JITTER_STRATEGY == 2 // blue noise\n    uniform sampler2D blueNoiseTex;\n    #endif\n\n    #include <common>\n    void main() {\n\n      vec2 vel = texture2D( velocityBuffer, vUv ).xy;\n\n      #if JITTER_STRATEGY == 0 // Regular Jitter\n      float jitterValue = mod( ( gl_FragCoord.x + gl_FragCoord.y ) * 0.25, 1.0 );\n      #elif JITTER_STRATEGY == 1 // Random Jitter\n      float jitterValue = rand( gl_FragCoord.xy * 0.01 );\n      #elif JITTER_STRATEGY == 2 // Blue Noise Jitter\n      float jitterValue = texture2D( blueNoiseTex, gl_FragCoord.xy / BLUENOISE_SIZE ).r;\n      #endif\n\n      vec2 jitterOffset = jitter * vel * vec2( jitterValue ) / float( SAMPLES );\n      vec4 result;\n\n      vec2 startUv = clamp( vUv - vel * 0.5 + jitterOffset, 0.0, 1.0 );\n      vec2 endUv = clamp( vUv + vel * 0.5 + jitterOffset, 0.0, 1.0 );\n      for( int i = 0; i < SAMPLES; i ++ ) {\n\n        vec2 sampleUv = mix( startUv, endUv, float( i ) / float( SAMPLES ) );\n        result += texture2D( sourceBuffer, sampleUv );\n\n      }\n\n      result /= float( SAMPLES );\n\n      gl_FragColor = result;\n\n    }\n  `,\n}\n","/**\n * @author Garrett Johnson / http://gkjohnson.github.io/\n * Source https://github.com/gkjohnson/threejs-sandbox/tree/master/motionBlurPass\n * Approach from http://john-chapman-graphics.blogspot.com/2013/01/per-object-motion-blur.html\n */\nimport {\n  Frustum,\n  Color,\n  WebGLRenderTarget,\n  LinearFilter,\n  RGBFormat,\n  HalfFloatType,\n  Matrix4,\n  DataTexture,\n  RGBAFormat,\n  FloatType,\n  ShaderMaterial,\n  UnsignedByteType,\n} from 'three'\nimport { Pass } from 'postprocessing'\nimport { Pass as ThreePass } from 'three/examples/jsm/postprocessing/Pass'\nimport { VelocityShader } from './VelocityShader'\nimport { GeometryShader } from './GeometryShader'\nimport { CompositeShader } from './CompositeShader'\n// import { BlueNoiseGenerator } from '../BlueNoiseGenerator/BlueNoiseGenerator'\nimport { traverseVisibleMeshes } from './utils'\n\nconst _blackColor = new Color(0, 0, 0)\nconst _defaultOverrides = {}\n\n// // Generate Blue Noise Textures\n// const generator = new BlueNoiseGenerator()\n// generator.size = 32\n\n// const data = new Uint8Array(32 ** 2 * 4)\n// for (let i = 0, l = 1; i < l; i++) {\n//   const result = generator.generate()\n//   const bin = result.data\n//   const maxValue = result.maxValue\n\n//   for (let j = 0, l2 = bin.length; j < l2; j++) {\n//     const value = 255 * (bin[j] / maxValue)\n//     data[j * 3 + i] = value\n//   }\n// }\n\n// // TODO: Why won't RedFormat work here?\n// const blueNoiseTex = new DataTexture(data, generator.size, generator.size, RGBFormat)\n// blueNoiseTex.wrapS = RepeatWrapping\n// blueNoiseTex.wrapT = RepeatWrapping\n// blueNoiseTex.minFilter = LinearFilter\n\nexport class MotionBlurPass extends Pass {\n  get enabled() {\n    return this._enabled\n  }\n\n  set enabled(val) {\n    if (val === false) {\n      this._prevPosMap.clear()\n      this._cameraMatricesNeedInitializing = true\n    }\n\n    this._enabled = val\n  }\n\n  constructor(scene, camera, options = {}) {\n    super()\n\n    // settings\n    this.samples = 'samples' in options ? options.samples : 15\n    this.expandGeometry = 'expandGeometry' in options ? options.expandGeometry : 0\n    this.interpolateGeometry = 'interpolateGeometry' in options ? options.interpolateGeometry : 1\n    this.smearIntensity = 'smearIntensity' in options ? options.smearIntensity : 1\n    this.blurTransparent = 'blurTransparent' in options ? options.blurTransparent : false\n    this.renderCameraBlur = 'renderCameraBlur' in options ? options.renderCameraBlur : true\n    this.renderTargetScale = 'renderTargetScale' in options ? options.renderTargetScale : 1\n    this.jitter = 'jitter' in options ? options.jitter : 1\n    this.jitterStrategy =\n      'jitterStrategy' in options ? options.jitterStrategy : MotionBlurPass.RANDOM_JITTER\n\n    this.debug = {\n      display: MotionBlurPass.DEFAULT,\n      dontUpdateState: false,\n    }\n\n    this.scene = scene\n    this.camera = camera\n\n    // list of positions from previous frames\n    this._prevPosMap = new Map()\n    this._currentFrameMod = 0\n    this._frustum = new Frustum()\n    this._projScreenMatrix = new Matrix4()\n    this._cameraMatricesNeedInitializing = true\n\n    this._prevCamProjection = new Matrix4()\n    this._prevCamWorldInverse = new Matrix4()\n\n    // render targets\n    this._velocityBuffer = new WebGLRenderTarget(\n      256 * this.renderTargetScale,\n      256 * this.renderTargetScale,\n      {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        type: HalfFloatType,\n      }\n    )\n    this._velocityBuffer.texture.name = 'MotionBlurPass.Velocity'\n    this._velocityBuffer.texture.generateMipmaps = false\n\n    this._compositeMaterial = new ShaderMaterial(CompositeShader)\n    this._compositeQuad = new ThreePass.FullScreenQuad(this._compositeMaterial)\n  }\n\n  initialize(renderer, alpha, frameBufferType) {\n    if (!alpha && frameBufferType === UnsignedByteType) {\n      this._velocityBuffer.texture.format = RGBFormat\n    }\n\n    if (frameBufferType !== undefined) {\n      this._velocityBuffer.texture.type = frameBufferType\n    }\n  }\n\n  // Pass API\n  dispose() {\n    super.dispose()\n    this._compositeQuad.dispose()\n    this._velocityBuffer.dispose()\n    this._prevPosMap.clear()\n  }\n\n  setSize(width, height) {\n    const renderTargetScale = this.renderTargetScale\n    const velocityBuffer = this._velocityBuffer\n    velocityBuffer.setSize(width * renderTargetScale, height * renderTargetScale)\n  }\n\n  render(renderer, readBuffer, writeBuffer) {\n    const debug = this.debug\n    const scene = this.scene\n    const camera = this.camera\n    const compositeQuad = this._compositeQuad\n    const finalBuffer = this.renderToScreen ? null : writeBuffer\n\n    // Set the clear state\n    renderer.autoClear = false\n    renderer.setClearColor(_blackColor, 0)\n\n    // TODO: This is getting called just to set 'currentRenderState' in the renderer\n    // NOTE -- why do we need this?\n    renderer.compile(scene, camera)\n    this._ensurePrevCameraTransform()\n\n    switch (debug.display) {\n      case MotionBlurPass.GEOMETRY: {\n        renderer.setRenderTarget(finalBuffer)\n        renderer.clear()\n        this._drawAllMeshes(renderer, MotionBlurPass.GEOMETRY, !debug.dontUpdateState)\n        break\n      }\n\n      case MotionBlurPass.VELOCITY: {\n        renderer.setRenderTarget(finalBuffer)\n        renderer.clear()\n        this._drawAllMeshes(renderer, MotionBlurPass.VELOCITY, !debug.dontUpdateState)\n        break\n      }\n\n      case MotionBlurPass.DEFAULT: {\n        const velocityBuffer = this._velocityBuffer\n        renderer.setRenderTarget(velocityBuffer)\n        renderer.clear()\n        this._drawAllMeshes(renderer, MotionBlurPass.VELOCITY, !debug.dontUpdateState)\n\n        const compositeMaterial = this._compositeMaterial\n        const uniforms = compositeMaterial.uniforms\n        uniforms.sourceBuffer.value = readBuffer.texture\n        uniforms.velocityBuffer.value = this._velocityBuffer.texture\n        uniforms.jitter.value = this.jitter\n        // uniforms.blueNoiseTex.value = blueNoiseTex\n\n        if (compositeMaterial.defines.SAMPLES !== this.samples) {\n          compositeMaterial.defines.SAMPLES = Math.max(0, Math.floor(this.samples))\n          compositeMaterial.needsUpdate = true\n        }\n\n        if (compositeMaterial.defines.JITTER_STRATEGY !== this.jitterStrategy) {\n          compositeMaterial.defines.JITTER_STRATEGY = this.jitterStrategy\n          compositeMaterial.needsUpdate = true\n        }\n\n        renderer.setRenderTarget(finalBuffer)\n        compositeQuad.render(renderer)\n\n        break\n      }\n    }\n\n    // Save the camera state for the next frame\n    this._prevCamWorldInverse.copy(camera.matrixWorldInverse)\n    this._prevCamProjection.copy(camera.projectionMatrix)\n  }\n\n  // Returns the set of previous frames data for object position and bone state. Creates\n  // a new object this with frames state if it hasn't been created yet.\n  _getPreviousFrameState(obj) {\n    const prevPosMap = this._prevPosMap\n    let data = prevPosMap.get(obj)\n    if (data === undefined) {\n      data = {\n        lastUsedFrame: -1,\n        matrixWorld: obj.matrixWorld.clone(),\n        geometryMaterial: new ShaderMaterial(GeometryShader),\n        velocityMaterial: new ShaderMaterial(VelocityShader),\n        boneMatrices: null,\n        boneTexture: null,\n      }\n      prevPosMap.set(obj, data)\n    }\n\n    const isSkinned =\n      obj.type === 'SkinnedMesh' && obj.skeleton && obj.skeleton.bones && obj.skeleton.boneMatrices\n\n    data.geometryMaterial.skinning = isSkinned\n    data.velocityMaterial.skinning = isSkinned\n\n    // copy the skeleton state into the prevBoneTexture uniform\n    const skeleton = obj.skeleton\n    const boneTextureNeedsUpdate =\n      data.boneMatrices === null || data.boneMatrices.length !== skeleton.boneMatrices.length\n    if (isSkinned && boneTextureNeedsUpdate) {\n      const boneMatrices = new Float32Array(skeleton.boneMatrices.length)\n      boneMatrices.set(skeleton.boneMatrices)\n      data.boneMatrices = boneMatrices\n\n      const size = Math.sqrt(skeleton.boneMatrices.length / 4)\n      const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType)\n      boneTexture.needsUpdate = true\n\n      data.geometryMaterial.uniforms.prevBoneTexture.value = boneTexture\n      data.velocityMaterial.uniforms.prevBoneTexture.value = boneTexture\n      data.boneTexture = boneTexture\n    }\n\n    return data\n  }\n\n  // saves the current state to be used next frame\n  _saveCurrentObjectState(obj) {\n    const prevPosMap = this._prevPosMap\n    const data = prevPosMap.get(obj)\n\n    if (data.boneMatrices !== null) {\n      data.boneMatrices.set(obj.skeleton.boneMatrices)\n      data.boneTexture.needsUpdate = true\n    }\n\n    data.matrixWorld.copy(obj.matrixWorld)\n  }\n\n  // Draw all meshes in the scene and discard those that are no longer being used\n  _drawAllMeshes(renderer, type, saveState) {\n    this._currentFrameMod = (this._currentFrameMod + 1) % 2\n    const thisFrameId = this._currentFrameMod\n    const prevPosMap = this._prevPosMap\n\n    traverseVisibleMeshes(this.scene, (mesh) => {\n      this._drawMesh(renderer, mesh, type, saveState)\n      if (prevPosMap.has(mesh)) {\n        prevPosMap.get(mesh).lastUsedFrame = thisFrameId\n      }\n    })\n\n    prevPosMap.forEach((data, mesh) => {\n      if (data.lastUsedFrame !== thisFrameId) {\n        data.geometryMaterial.dispose()\n        data.velocityMaterial.dispose()\n        if (data.boneTexture) {\n          data.boneTexture.dispose()\n        }\n        prevPosMap.delete(mesh)\n      }\n    })\n  }\n\n  _drawMesh(renderer, mesh, type, saveState) {\n    const overrides = mesh.motionBlur || _defaultOverrides\n    let blurTransparent = this.blurTransparent\n    let renderCameraBlur = this.renderCameraBlur\n    let expandGeometry = this.expandGeometry\n    let interpolateGeometry = this.interpolateGeometry\n    let smearIntensity = this.smearIntensity\n\n    blurTransparent =\n      'blurTransparent' in overrides ? overrides.blurTransparent : this.blurTransparent\n    renderCameraBlur =\n      'renderCameraBlur' in overrides ? overrides.renderCameraBlur : this.renderCameraBlur\n    expandGeometry = 'expandGeometry' in overrides ? overrides.expandGeometry : this.expandGeometry\n    interpolateGeometry =\n      'interpolateGeometry' in overrides ? overrides.interpolateGeometry : this.interpolateGeometry\n    smearIntensity = 'smearIntensity' in overrides ? overrides.smearIntensity : this.smearIntensity\n\n    const isTransparent = mesh.material.transparent || mesh.material.alpha < 1\n    const isCulled = mesh.frustumCulled && !this._frustum.intersectsObject(mesh)\n    const skip = (blurTransparent === false && isTransparent) || isCulled\n\n    if (skip) {\n      if (this._prevPosMap.has(mesh) && saveState) {\n        this._saveCurrentObjectState(mesh)\n      }\n    } else {\n      const camera = this.camera\n      const data = this._getPreviousFrameState(mesh)\n\n      const material =\n        type === MotionBlurPass.GEOMETRY ? data.geometryMaterial : data.velocityMaterial\n      const uniforms = material.uniforms\n      uniforms.expandGeometry.value = expandGeometry\n      uniforms.interpolateGeometry.value = interpolateGeometry\n      uniforms.smearIntensity.value = smearIntensity\n\n      const projMat = renderCameraBlur ? this._prevCamProjection : camera.projectionMatrix\n      const invMat = renderCameraBlur ? this._prevCamWorldInverse : camera.matrixWorldInverse\n      uniforms.prevProjectionMatrix.value.copy(projMat)\n      uniforms.prevModelViewMatrix.value.multiplyMatrices(invMat, data.matrixWorld)\n\n      renderer.renderBufferDirect(camera, null, mesh.geometry, material, mesh, null)\n\n      if (saveState) {\n        this._saveCurrentObjectState(mesh)\n      }\n    }\n  }\n\n  _ensurePrevCameraTransform() {\n    const camera = this.camera\n    const projScreenMatrix = this._projScreenMatrix\n\n    // reinitialize the camera matrices to the current transform because if\n    // the pass has been disabled then the matrices will be out of date\n    if (this._cameraMatricesNeedInitializing) {\n      this._prevCamWorldInverse.copy(camera.matrixWorldInverse)\n      this._prevCamProjection.copy(camera.projectionMatrix)\n      this._cameraMatricesNeedInitializing = false\n    }\n\n    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse)\n    this._frustum.setFromProjectionMatrix(projScreenMatrix)\n  }\n}\n\nMotionBlurPass.DEFAULT = 0\nMotionBlurPass.VELOCITY = 1\nMotionBlurPass.GEOMETRY = 2\n\nMotionBlurPass.REGULAR_JITTER = 0\nMotionBlurPass.RANDOM_JITTER = 1\n// MotionBlurPass.BLUENOISE_JITTER = 2\n","export function traverseVisibleMeshes(obj, callback) {\n  if (obj.visible) {\n    if (obj.isMesh || obj.isSkinnedMesh) {\n      callback(obj)\n    }\n\n    const children = obj.children\n    for (let i = 0, l = children.length; i < l; i++) {\n      traverseVisibleMeshes(children[i], callback)\n    }\n  }\n}\n","import State from 'controls-state'\nimport { EffectPass, VignetteEffect } from 'postprocessing'\nimport WebGLApp from './lib/WebGLApp'\nimport assets from './lib/AssetManager'\nimport Suzanne, { addScreenshotButton } from './scene/Suzanne'\nimport { addNaturalLight } from './scene/lights'\nimport { MotionBlurPass } from './lib/MotionBlurPass/MotionBlurPass'\n\nwindow.DEBUG = window.location.search.includes('debug')\n\n// grab our canvas\nconst canvas = document.querySelector('#app')\n\n// setup the WebGLRenderer\nconst webgl = new WebGLApp({\n  canvas,\n  // enable transparency\n  alpha: true,\n  // set the scene background color\n  background: '#111',\n  backgroundAlpha: 1,\n  // enable gamma correction, read more about it here:\n  // https://www.donmccurdy.com/2020/06/17/color-management-in-threejs/\n  gamma: true,\n  // enable postprocessing\n  postprocessing: true,\n  // clamping the pixel ratio gives us better performance for\n  // heavy postprocessing effects, such as motion blur\n  maxPixelRatio: 1,\n  // show the fps counter from stats.js\n  showFps: window.DEBUG,\n  // enable OrbitControls\n  orbitControls: window.DEBUG,\n  // Add the controls-gui inputs\n  controls: {\n    roughness: 0.5,\n    movement: {\n      speed: State.Slider(1.5, {\n        step: 0.01,\n        min: 0.01,\n        max: 100,\n        // exponential mapping\n        mapping: (x) => Math.pow(10, x),\n        inverseMapping: Math.log10,\n      }),\n      frequency: State.Slider(0.5, {\n        step: 0.01,\n        max: 5,\n      }),\n      amplitude: State.Slider(0.7, { step: 0.01, max: 2 }),\n    },\n  },\n  hideControls: !window.DEBUG,\n  // enable cannon-es\n  // world: new CANNON.World(),\n})\n\n// attach it to the window to inspect in the console\nif (window.DEBUG) {\n  window.webgl = webgl\n}\n\n// hide canvas\nwebgl.canvas.style.visibility = 'hidden'\n\n// load any queued assets\nassets.load({ renderer: webgl.renderer }).then(() => {\n  // show canvas\n  webgl.canvas.style.visibility = ''\n\n  // add any \"WebGL components\" here...\n  // append them to the scene so you can\n  // use them from other components easily\n  webgl.scene.suzanne = new Suzanne(webgl)\n  webgl.scene.add(webgl.scene.suzanne)\n\n  // lights and other scene related stuff\n  addNaturalLight(webgl)\n\n  // postprocessing\n  // add a custom pass\n  const motionBlurPass = new MotionBlurPass(webgl.scene, webgl.camera, {\n    expandGeometry: 0.1,\n    smearIntensity: 0.8,\n    samples: 50,\n    jitterStrategy: MotionBlurPass.REGULAR_JITTER,\n    jitter: 3,\n  })\n  webgl.composer.addPass(motionBlurPass)\n\n  // add an existing effect from postprocessing\n  webgl.composer.addPass(new EffectPass(webgl.camera, new VignetteEffect()))\n\n  // add the save screenshot button\n  if (window.DEBUG) {\n    addScreenshotButton(webgl)\n  }\n\n  // start animation loop\n  webgl.start()\n})\n","import * as THREE from 'three'\n\n// natural hemisphere light from\n// https://threejs.org/examples/#webgl_lights_hemisphere\nexport function addNaturalLight(webgl) {\n  const hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.6)\n  hemiLight.color.setHSL(0.6, 1, 0.6)\n  hemiLight.groundColor.setHSL(0.095, 1, 0.75)\n  hemiLight.position.set(0, 50, 0)\n  webgl.scene.add(hemiLight)\n\n  const dirLight = new THREE.DirectionalLight(0xffffff, 1)\n  dirLight.color.setHSL(0.1, 1, 0.95)\n  dirLight.position.set(3, 5, 1)\n  dirLight.position.multiplyScalar(50)\n  webgl.scene.add(dirLight)\n}\n"],"sourceRoot":""}